<?phpnamespace Teacher\Controller;use Think\Controller;class IndexController extends CommonController {    public function _initialize() {        parent::_initialize();    }    public function index() {        $act = "getMember";        $data["token"] = session("token");        $return = $this->getdata($act, $data);        $this->assign("info1", $return["msg"]);        $cid = I("cid", 0, 'intval');        if (!empty($cid)) {            $student = M("student")->where(array("class_id" => $cid))->select();            foreach ($student as $k => $v) {                $phone = $v["phone"];                $phone2 = $v["phone2"];                $member = M("member")->where(array("phone" => $phone))->find();                $member2 = M("member")->where(array("phone" => $phone2))->find();                $student[$k]["parent"] = $member;                $student[$k]["parent2"] = $member2;                $student[$k]["birthday"] = date("Y-m-d", $v["birthday"]);            }            $class = M("class")->where(array("id" => $cid))->find();            $class_name = $class["grade"] . "-" . $class["name"];            $this->assign("banji", $class_name);            $this->assign("cid", $cid);                       $this->assign("info", $student);        }         $minfo = session("minfo");               $this->assign("master", $minfo['tinfo']['master_class_id']);        $this->display();    }    public function parent_edit() {        //判断是不是老师班主任           $data = I();        $minfo = session("minfo");        if (empty($minfo["tinfo"])) {            $this->error("你不是老师不能修改");        }        if (empty($minfo["tinfo"]["master_class_id"])) {            $this->error("你不是班主任不能修改");        }        $st = M("student")->where(array("id" => $data["id"]))->find();                if ($minfo['tinfo']['master_class_id'] != $st['class_id']) {                      $this->error('您不是该学生的班主任，不能修改');        }        //             $id = $data["id"];        $Student = D("Student");        if (!$Student->create($data)) {            $this->error($Student->getError());        } else {            $Student->startTrans();            if (empty($data["use_money"])) {                $data["money"] = $data["s_money"];            } else {                $data["money"] = $data["s_money"] - $data["use_money"];            }            $data["birthday"] = strtotime($data["birthday"]);            $Student->where(array("id" => $id))->save($data);//            //班费详情记录//            if (!empty($data["use_money"])) {//                if (empty($data["note"])) {//                    $this->error("请输入使用原因");//                } else {//                    $class = M("student")->where(array("id" => $id))->field("class_id")->find();//                    $class_id = $class["class_id"];//                    $class_money_log = M("class_money_log")->where(array("class_id" => $class_id))->order("id desc")->limit(1)->select();//                    $now_money = $class_money_log[0]["now_money"];//                    $c["now_money"] = $now_money - $data["use_money"];//                    $c["class_id"] = $class_id;//                    $c["money"] = $data["use_money"];//                    $c["type"] = 1;//                    $c["note"] = $data["note"];//                    $c["bz"] = $id;//                    $c["app_id"] = 0;//                    $c["now_free_money"] = 0;//                    $c["addtime"] = time();//                    if ($class_money_id = $class_money_log = M("class_money_log")->add($c)) {//                        $student_money_log = M("student_money_log")->where(array("student_id" => $id))->order("id desc")->limit(1)->select();//                        $s_now_money = $student_money_log[0]["now_money"];//                        $st["student_id"] = $id;//                        $st["class_money_id"] = $class_money_id;//                        $st["money"] = $data["use_money"];//                        $st["type"] = 1;//                        $st["note"] = $data["note"];//                        $st["now_money"] = $s_now_money - $data["use_money"];//                        $st["addtime"] = time();//                        $student_money_log = M("student_money_log")->add($st);//                    };//                }//            }//            $class_money_log = M("class_money_log")->add();//            //            if (!empty($data["parent_id"])) {                if ($mb = M("member")->where(array("real_name" => $data["real_name"], "phone" => $data["phone"]))->find()) {                                    } else {                    $p["real_name"] = $data["real_name"];                    $p["phone"] = $data["phone"];                    $Member = D("Member");                    if (!$Member->create($p)) {                        $Student->rollback();                        $this->error($Member->getError());                    } else {                        $Member->where(array("id" => $data["parent_id"]))->save($p);                    }                }            } else {                if (!empty($data["real_name"]) && !empty($data["phone"])) {                    if ($mb = M("member")->where(array("real_name" => $data["real_name"], "phone" => $data["phone"]))->find()) {                                            } else {                        $p["real_name"] = $data["real_name"];                        $p["phone"] = $data["phone"];                        $Member = D("Member");                        if (!$Member->create($p)) {                            $Student->rollback();                            $this->error($Member->getError());                        } else {                            $Member->add($p);                        }                    }                }            }            if (!empty($data["parent_id2"])) {                if ($mb = M("member")->where(array("real_name" => $data["real_name2"], "phone" => $data["phone2"]))->find()) {                                    } else {                    $pp["real_name"] = $data["real_name2"];                    $pp["phone"] = $data["phone2"];                    $Member = D("Member");                    if (!$Member->create($pp)) {                        $Student->rollback();                        $this->error($Member->getError());                    } else {                        $Member->where(array("id" => $data["parent_id2"]))->save($pp);                    }                }            } else {                if (!empty($data["real_name2"]) && !empty($data["phone2"])) {                    if ($mb = M("member")->where(array("real_name" => $data["real_name2"], "phone" => $data["phone2"]))->find()) {                                            } else {                        $pp["real_name"] = $data["real_name2"];                        $pp["phone"] = $data["phone2"];                        $Member = D("Member");                        if (!$Member->create($pp)) {                            $Student->rollback();                            $this->error($Member->getError());                        } else {                            $Member->add($pp);                        }                    }                }            }        }        $Student->commit();        $this->success("修改成功");    }    public function student_add() {        //判断是否是老师，班主任        $data = I();        $minfo = session("minfo");        if (empty($minfo["tinfo"])) {            $this->error("你不是老师，不能添加学生");        }        if (empty($minfo["tinfo"]["master_class_id"])) {            $this->error("你不是班主任，不能添加学生");        }        //                $cid = $data["class_id"];        if (empty($cid)) {            $this->error("请选择班级");        }        $Student = D("Student");        if (!$Student->create()) {            $this->error($Student->getError());        } else {            $Student->startTrans();            if ($student_id = $Student->add()) {//                //班费////                $class_id = $data["class_id"];//                $class_money_log = M("class_money_log")->where(array("class_id" => $class_id))->order("id desc")->limit(1)->select();//                $now_money = $class_money_log[0]["now_money"];//                $c["now_money"] = $now_money + $data["money"];//                $c["class_id"] = $class_id;//                $c["money"] = $data["money"];//                $c["type"] = 0;//                $c["note"] = "期初班费";//                $c["bz"] = $student_id;//                $c["app_id"] = 0;//                $c["now_free_money"] = 0;//                $c["addtime"] = time();//                if ($class_money_id = $class_money_log = M("class_money_log")->add($c)) {//////                    $st["student_id"] = $student_id;//                    $st["class_money_id"] = $class_money_id;//                    $st["money"] = $data["money"];//                    $st["type"] = 0;//                    $st["note"] = "班费初始值";//                    $st["now_money"] = $data["money"];//                    $st["addtime"] = time();//                    $student_money_log = M("student_money_log")->add($st);//                };//                //                if (!empty($data["real_name2"]) && !empty($data["phone2"])) {                    if ($mb = M("member")->where(array("real_name" => $data["real_name2"], "phone" => $data["phone2"]))->find()) {                                            } else {                        $pp["real_name"] = $data["real_name2"];                        $pp["phone"] = $data["phone2"];                        $pp["teacher_id"] = 0;                        $Member = D("Member");                        if (!$Member->create($pp)) {                            $Student->rollback();                            $this->error($Member->getError());                        } else {                            $Member->add($pp);                        }                    }                }                if (!empty($data["real_name"]) && !empty($data["phone"])) {                    if ($mb = M("member")->where(array("real_name" => $data["real_name"], "phone" => $data["phone"]))->find()) {                                            } else {                        $p["real_name"] = $data["real_name"];                        $p["phone"] = $data["phone"];                        $p["teacher_id"] = 0;                        $Member = D("Member");                        if (!$Member->create($p)) {                            $Student->rollback();                            $this->error($Member->getError());                        } else {                            $Member->add($p);                        }                    }                }                $Student->commit();            };            $this->success("新增成功");        }    }    public function student_del() {        $id = I("id", 0, "intval");        if (empty($id)) {            $this->error('请选择学生');        }        $minfo = session("minfo");        if (empty($minfo['tinfo'])) {            $this->error('您不是老师不能删除');        }        if (empty($minfo["tinfo"]["master_class_id"])) {            $this->error('您不是班主任不能删除');        }        $st = M("student")->where(array("id" => $id))->find();        if ($minfo['tinfo']['master_class_id'] != $st['class_id']) {            $this->error('您不是该学生的班主任，不能删除');        }        if ($st['money'] != 0) {            $this->error('该学生还有未使用班费，请先结清班费');        }        //判断学生家长在该班级是否还有孩子        $phone_arr = $st;        $map["phone"] = array("in", $phone_arr);        $map["phone2"] = array("in", $phone_arr);        $map['_logic'] = 'OR';        if ($stu = M("student")->where($map)->select()) {                    } else {            $where["phone"] = array("in", $phone_arr);            $member = M("member")->where($where)->delete();        };        $student = M("student")->where(array("id" => $id))->setField('class_id', 0);        $this->success("删除成功");    }    public function tongzhi() {        $act = "getMember";        $data["token"] = session("token");        $return = $this->getdata($act, $data);        $this->assign("info", $return['msg']);        $message_type = M("message_type")->select();        $this->assign("minfo", $message_type);        $class_id = I("class_id");        if (!empty($class_id)) {            $act = "addMessage";            $sdata = I('', '', '');                         $sdata["content"] = $sdata["desc"];            if (!empty($sdata["student_ids"])) {                $sdata["student_ids"] = implode(",", $sdata["student_ids"]);            }                        foreach($sdata["pics"] as &$v){                if(!empty($v)){                     $v=C("WEB_DOMAIN").substr($v, 1);                }                      }            $sdata["pics"]= implode(",", $sdata["pics"]);        $sdata["pics"]=substr($sdata["pics"],0,-1);            unset($sdata["desc"]);            $data1 = $sdata;            $data1["token"] = session("token");                      $return = $this->getdata($act, $data1);            if ($return["status"] == 1) {                $this->success("发布成功");                return false;            } else {                $this->error("发布失败");            }        }        $this->display();    }    public function zuoye() {        $act = "getMember";        $data["token"] = session("token");        $return = $this->getdata($act, $data);        $this->assign("info", $return['msg']);        $message_type = M("message_type")->select();        $this->assign("minfo", $message_type);        $class_id = I("class_id");        if (!empty($class_id)) {            $act = "addHomework";            $sdata = I('', '', '');            $sdata["content"] = $sdata["desc"];                             foreach($sdata["pics"] as &$v){                if(!empty($v)){                     $v=C("WEB_DOMAIN").substr($v, 1);                }                      }            $sdata["pics"]= implode(",", $sdata["pics"]);        $sdata["pics"]=substr($sdata["pics"],0,-1);            unset($sdata["desc"]);            $data1 = $sdata;            $data1["token"] = session("token");                        $return = $this->getdata($act, $data1);            if ($return["status"] == 1) {                $this->success("发布成功");                return false;            } else {                $this->error("发布失败");            }        }        $this->display();    }    public function upload() {        $url = C('WEB_DOMAIN') . 'api.php?upload';        $oCurl = curl_init();        $strPOST = array('img' => '@' . $_FILES['img']['tmp_name'] . ';type=' . $_FILES['img']['type'] . ';filename=' . $_FILES['img']['name']);        curl_setopt($oCurl, CURLOPT_URL, $url);        curl_setopt($oCurl, CURLOPT_RETURNTRANSFER, 1);        curl_setopt($oCurl, CURLOPT_POST, true);        curl_setopt($oCurl, CURLOPT_POSTFIELDS, $strPOST);        $sContent = curl_exec($oCurl);        $aStatus = curl_getinfo($oCurl);        curl_close($oCurl);        if (intval($aStatus["http_code"]) == 200) {            $json = json_decode($sContent, true);            if (!$json) {                $this->error('json解析出错');            } elseif ($json['status'] == 0) {                $this->error($json['msg']);            }            $this->success($json['msg']);        } else {            $this->error('curl出错 http_code:' . intval($aStatus["http_code"]));        }    }    public function history_tongzhi() {        $id = I("id");        $message = M("message")->where(array("id" => $id))->find();        if (!empty($message["pics"])) {            $message["pic_arr"] = explode(",", $message["pics"]);        } else {            $message["pic_arr"] = array();        }        foreach($message["pic_arr"] as &$v){             //$message["pics"] = str_replace(C("WEB_DOMAIN"),"/", $message["pics"]);              $v = str_replace(C("WEB_DOMAIN"),"/", $v);        }                $this->assign("id", $id);        $this->assign("info", $message);        if (IS_POST) {            $act = "editMessage";            $sdata = I('', '', '');            $sdata["content"] = $sdata["desc"];            unset($sdata["desc"]);               foreach($sdata["pics"] as &$v){                if(!empty($v)){                     $v=C("WEB_DOMAIN").substr($v, 1);                }                      }            $sdata["pics"]= implode(",", $sdata["pics"]);        $sdata["pics"]=substr($sdata["pics"],0,-1);            $data1 = $sdata;            $data1["token"] = session("token");            $return = $this->getdata($act, $data1);            if ($return["status"] == 1) {                $this->success("修改成功");                return false;            } else {                $this->error("修改失败");            }        }        $this->display();    }    public function history_zuoye() {        $id = I("id");        $homework = M("homework")->where(array("id" => $id))->find();         if (!empty($homework["pics"])) {            $homework["pic_arr"] = explode(",", $homework["pics"]);        } else {            $homework["pic_arr"] = array();        }        foreach($homework["pic_arr"] as &$v){             //$message["pics"] = str_replace(C("WEB_DOMAIN"),"/", $message["pics"]);              $v = str_replace(C("WEB_DOMAIN"),"/", $v);        }              $this->assign("id", $id);        $this->assign("info", $homework);        if (IS_POST) {            $act = "editHomework";            $sdata = I('', '', '');                         $sdata["content"] = $sdata["desc"];              foreach($sdata["pics"] as &$v){                if(!empty($v)){                     $v=C("WEB_DOMAIN").substr($v, 1);                }                      }            $sdata["pics"]= implode(",", $sdata["pics"]);            $sdata["pics"]=substr($sdata["pics"],0,-1);            unset($sdata["desc"]);            $data1 = $sdata;            $data1["token"] = session("token");                      $return = $this->getdata($act, $data1);            if ($return["status"] == 1) {                $this->success("修改成功");                return false;            } else {                $this->error("修改失败");            }        }        $this->display();    }    //删除没用的图片    public function del_unuse_pic() {       $files=my_scandir("./Uploads/");       $arr=array();       foreach($files["images"] as $k=>$v){           foreach($v as $vv){                 $arr[]="http://3dshow.kanuvip.com/Uploads/images/".$k."/".$vv;           }       }       $where["pics"]=array("neq","");      $homework=M("homework")->where($where)->field("pics")->select();      foreach($homework as &$v){          $v=explode(",",$v["pics"]);      }      $message=M("message")->where($where)->field("pics")->select();        foreach($message as &$v){          $v=explode(",",$v["pics"]);      }       $outpay_apply=M("outpay_apply")->where($where)->field("pics")->select();        foreach($outpay_apply as &$v){          $v=explode(",",$v["pics"]);      }      $map["img"]=array("neq","");      $subject=M("subject")->where($map)->field("img")->select();      unset($map);      $map["headerurl"]=array("neq","");      $student=M("student")->where($map)->field("headerurl")->select();        unset($map);      $map["headerurl"]=array("neq","");      $member=M("member")->where($map)->field("headerurl")->select();      $new_arr=array();      foreach($homework as $v){          foreach($v as $vv){              $new_arr[]=$vv;          }      }       foreach($message as $v){          foreach($v as $vv){              $new_arr[]=$vv;          }      }      foreach($subject as $v){          foreach($v as $vv){              $new_arr[]=$vv;          }      }       foreach($student as $v){          foreach($v as $vv){              $new_arr[]=$vv;          }      }        foreach($outpay_apply as $v){          foreach($v as $vv){              $new_arr[]=$vv;          }      }        foreach($member as $v){          foreach($v as $vv){              $new_arr[]=$vv;          }      }       $diff_arr=array_diff($arr,$new_arr);       foreach($diff_arr as $v){        $v=str_replace("http://3dshow.kanuvip.com/","./",$v);         if(file_exists($v)){             unlink($v);         }    }    }    public function jiaweihui(){        $act = "getMember";        $data["token"] = session("token");        $return = $this->getdata($act, $data);        $this->assign("info", $return["msg"]);         $minfo = session("minfo");         $this->assign("master", $minfo['tinfo']['master_class_id']);        $this->display();    }    public function pta_add(){        $act = "setPta";        $data=I();        $data["member_ids"]=  implode(",", $data["member_ids"]);        $data["token"] = session("token");        $return = $this->getdata($act, $data);        if($return["status"]==0){            $this->error($return["msg"]);        }else{            $this->success($return["msg"]);        }    }    public function pta_del(){        $id=I("id");        //班主任才能删除          $minfo = session("minfo");        if (empty($minfo["tinfo"])) {            $this->error("你不是老师不能删除");        }        if (empty($minfo["tinfo"]["master_class_id"])) {            $this->error("你不是班主任不能删除");        }        $pa = M("pta")->where(array("id" => $id))->find();                if ($minfo['tinfo']['master_class_id'] != $pa['class_id']) {                      $this->error('您不是该学生班的班主任，不能删除');        }        //        $pta=M("pta")->where(array("id"=>$id))->delete();        $member=M("member")->where(array("pta_id"=>$id))->setField('pta_id', "");        $this->success("删除成功");    }    public function apiqingqiu() {        $act = I("act");        $data = I();        $data['token'] = session('token');        $return = $this->getdata($act, $data);                 if($return["status"]==0){            $this->error($return["msg"]);        }else{            $this->success($return["msg"]);        }    }}