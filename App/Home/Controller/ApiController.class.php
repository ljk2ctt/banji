<?phpnamespace Home\Controller;use Think\Controller;use Lib\Wechat;class ApiController extends Controller {    public function _empty($name) {        $this->error('不存在接口:' . $name);    }    public function wx_jump()    {        redirect(C('WEB_DOMAIN').JS_PROJECT_DIR.'/index2.html');        return;    }    public function _initialize() {        header('Access-Control-Allow-Origin: *');        //不需要验证签名的方法        $no_auth = array('upload', 'getopenid', 'test','getWxJsConfig','getImgInfo','wx_jump');        //不需要post的方法        $no_post_auth = array('getopenid', 'test','wx_jump');        if (!IS_POST && !in_array(ACTION_NAME, $no_post_auth)) {            $this->error('请使用post请求');        }        if (!in_array(ACTION_NAME, $no_auth)) {            $this->checkSign();        }        if (isset($_POST['p'])) {            $_GET['p'] = I('p');        }    }    public function getopenid() {        $callback = I('callback');        $randtime = I('randtime');        if ($randtime) {            $callback = S('callback' . $randtime);            S('callback' . $randtime, null);        }        if (empty($callback)) {            $this->error('缺少参数callback' . $randtime);        }        $weObj = new Wechat(C('WEIXIN_CONIFG'));        S('callback' . NOW_TIME, $callback, 120);        if (false === $tinfo = $weObj->getOauthAccessToken()) {            $randtime = NOW_TIME;            $redirect = $weObj->getOauthRedirect($this->this_u(array('randtime' => $randtime, 'callback' => $callback)), 'snsapi_userinfo');            redirect($redirect);        }        if (false === $uinfo = $weObj->getOauthUserinfo($tinfo['access_token'], $tinfo['openid'])) {            $this->error($weObj->getError());        }        $openid = $uinfo['openid'];        $nickname = $uinfo['nickname'];        $headimgurl = $uinfo['headimgurl'];        if (strpos($callback, '?')) {            $url = $callback . '&openid=' . $openid . '&nickname=' . $nickname . '&headimgurl=' . $headimgurl;        } else {            $url = $callback . '?openid=' . $openid . '&nickname=' . $nickname . '&headimgurl=' . $headimgurl;        }        if (substr($url, 0, 7) != 'http://') {            $url = 'http://' . $url;        }        $url = htmlspecialchars_decode($url);        $url.="&" . NOW_TIME;//        echo '<a href="' . $url . '">' . $url . '</a>';exit;        redirect($url);    }    /**     * 根据openid获取会员信息     */    public function getMemberByOpenid() {        $openid = I('openid');        if (empty($openid)) {            $this->error('缺少参数openid');        }        $Member = M('Member');        $map['openid'] = $openid;        if (false === $minfo = $Member->where($map)->find()) {            $this->error($Member->getError());        }        if (empty($minfo)) {            $this->error('您还未绑定手机');        }        if (empty($minfo['token'])) {            $minfo['token'] = md5($openid . NOW_TIME . rand(10, 99));            $Member->where(array('id' => $minfo['id']))->setField('token', $minfo['token']);        }        $this->_login($minfo['token']);    }    public function getMember() {        $this->success($this->minfo());    }    /**     * 获取班级信息  多个班级逗号分隔     */    public function getClassInfo() {        $class_id = I('class_id', 0, '');        if (empty($class_id)) {            $this->error('缺少参数class_id');        }        $this->success($this->cinfo($class_id));    }    /**     * 班级通讯录     */    public function classMemberList() {        $minfo = $this->minfo();        $class_id = I('class_id', 0, '');        if (empty($class_id)) {            $this->error('缺少参数class_id');        }        $is_master = false;        if ($class_id == $minfo['tinfo']['master_class_id']) {            $is_master = true;        }        $is_pta = false;        if ($class_id == $minfo['ptainfo']['class_id']) {            $is_pta = true;        }        $Class = M('Class');        $cinfo = $Class->find($class_id);        if (empty($cinfo)) {            $this->error('不存在班级');        }        $Model = M('');        //查询班级的老师        $teachers = $Model->table('__MEMBER__ m')                        ->join('__TEACHER_SUBJECT_CLASS_ACCESS__ tsca on tsca.teacher_id=m.teacher_id', 'left')                        ->join('__TEACHER__ t on t.id=m.teacher_id', 'left')                        ->join('__SUBJECT__ s on tsca.subject_id=s.id ', 'left')                        ->where(array('tsca.class_id' => $class_id))->field('m.*,m.real_name as name,if(t.master_class_id>0,1,0) as is_master,s.name as subject_name')->select();        $students = $Model->table('__STUDENT__')->where(array('class_id' => $class_id))->field('name as sname,id sid,phone,phone2,family_ties,family_ties2')->select();        $Py = new \Lib\Py();        foreach ($teachers as &$teacher) {            $letter = $Py->str2py($teacher['name'], true);            $teacher['first_letter'] = substr($letter, 0, 1);            if (preg_match("/^[\x81-\xfe][\x40-\xfe]?/", $teacher['name'])) {                $teacher['first_name'] = substr($teacher['name'], 0, 3);            } else {                $teacher['first_name'] = substr($teacher['name'], 0, 1);            }            $teacher['name'] = $teacher['first_name'] . '老师';        }        foreach ($students as &$student) {            $letter = $Py->str2py($student['sname'], true);            $first_letter[] = $student['first_letter'] = strtoupper(substr($letter, 0, 1));            if (preg_match("/^[\x81-\xfe][\x40-\xfe]?/", $student['sname'])) {                $student['first_name'] = substr($student['sname'], 0, 3);            } else {                $student['first_name'] = substr($student['sname'], 0, 1);            }            $par_info = $Model->table('__MEMBER__')->where(array('phone' => array('in', $student['phone'] . ',' . $student['phone2'])))->getField('phone,id,pta_id,real_name,headerurl');            $par_name_info = array();            $student['pta_id'] = '';            foreach ($par_info as $tmp) {                if ($tmp['phone'] == $student['phone'] && !empty($student['family_ties'])) {                    $tmp['real_name'] = $student['family_ties'] . '-' . $tmp['real_name'];                } elseif ($tmp['phone'] == $student['phone2'] && !empty($student['family_ties2'])) {                    $tmp['real_name'] = $student['family_ties2'] . '-' . $tmp['real_name'];                }                $par_name_info[] = $tmp['real_name'];                if (!empty($tmp['pta_id'])) {                    $this_class_pta_id = M('Pta')->where(array('id' => array('in', $tmp['pta_id']), 'class_id' => $class_id))->getField('id');                    if ('' === $student['pta_id'] && !empty($this_class_pta_id)) {                        $student['pta_id'] = $this_class_pta_id;                    }                }            }            $student['real_name'] = implode(',', $par_name_info);            $student['headerurl'] = !empty($par_info[$student['phone']]) && !empty($par_info[$student['phone']]['headerurl']) ? $par_info[$student['phone']]['headerurl'] : (!empty($par_info[$student['phone2']]) && !empty($par_info[$student['phone2']]['headerurl']) ? $par_info[$student['phone2']]['headerurl'] : '');            $student['id'] = !empty($par_info[$student['phone']]) ? $par_info[$student['phone']]['id'] : (!empty($par_info[$student['phone2']]) ? $par_info[$student['phone2']]['id'] : '');//            if (!$is_master && !$is_pta) {//                if($student['phone'])//                $student['phone'] = '***********';//                if($student['phone2'])//                $student['phone2'] = '***********';//            }        }        array_multisort($first_letter, SORT_ASC, $students);        $data['teachers'] = $teachers;        $data['membbers'] = $students;        $data['first_letter'] = array_values(array_unique($first_letter));        $this->success($data);    }    public function classPtaMemberList() {        $minfo = $this->minfo();        $class_id = I('class_id', 0, '');        if (empty($class_id)) {            $this->error('缺少参数class_id');        }        $is_master = false;        if ($class_id == $minfo['tinfo']['master_class_id']) {            $is_master = true;        }        $is_pta = false;        if ($class_id == $minfo['ptainfo']['class_id']) {            $is_pta = true;        }        $Class = M('Class');        $cinfo = $Class->find($class_id);        if (empty($cinfo)) {            $this->error('不存在班级');        }        $Model = M('');        $members = $Model->table('__MEMBER__ m')->join('__STUDENT__ s on s.phone=m.phone or s.phone2=m.phone', 'left')->where(array('s.class_id' => $class_id))->field('m.*,m.real_name as name,s.name as sname')->order('sname')->select();        $Py = new \Lib\Py();        foreach ($members as &$member) {            $letter = $Py->str2py($member['sname'], true);            $first_letter[] = $member['first_letter'] = strtoupper(substr($letter, 0, 1));            if (!$is_master && !$is_pta) {//                $member['phone'] = '***********';            }            if (preg_match("/^[\x81-\xfe][\x40-\xfe]?/", $member['sname'])) {                $member['first_name'] = substr($member['sname'], 0, 3);            } else {                $member['first_name'] = substr($member['sname'], 0, 1);            }            if (!empty($member['pta_id'])) {                $pta_info = M('Pta')->where(array('id' => array('in', $member['pta_id']), 'class_id' => $class_id))->find();                $member['pta_id'] = $pta_info ? $pta_info['id'] : '';                $member['can_toupiao'] = $pta_info ? $pta_info['can_toupiao'] : '';            }        }        $new_members = array();        foreach ($members as $member1) {            if (array_key_exists($member1['id'], $new_members)) {                $new_members[$member1['id']]['sname'].=',' . $member1['sname'];            } else {                $new_members[$member1['id']] = $member1;            }        }        sort($first_letter);        $members = array_values($new_members);        array_multisort($first_letter, SORT_ASC, $members);        $data['membbers'] = $members;        $data['first_letter'] = array_values(array_unique($first_letter));        $this->success($data);    }    /**     * 获取班级成员     */    public function getClassMemberList() {        $minfo = $this->minfo();        $class_id = I('class_id', 0, 'intval');        if (empty($class_id)) {            $this->error('缺少参数class_id');        }        if ($minfo['tinfo']['master_class_id'] != $class_id) {            $this->error('您不是该班班主任');        }        $Model = M();        $members = $Model->table('__STUDENT__ s')->join('__MEMBER__ m on s.phone=m.phone or s.phone2=m.phone', 'left')->where(array('s.class_id' => $class_id))->field('m.*,m.real_name as name,s.name as sname,if(m.phone=s.phone,s.family_ties,s.family_ties2) ties')->select();        $this->success($members);    }    public function getStudentInfo() {        $student_id = I('student_id', 0, 'intval');        if (empty($student_id)) {            $this->error('缺少参数student_id');        }        $Student = D('Student');        if (false === $info = $Student->find($student_id)) {            $this->error($Student->getError());        }        if (empty($info)) {            $this->error('学生不存在');        }        $this->success($info);    }    /**     * 设置家庭关系     */    public function setTies() {        $minfo = $this->minfo();        $student_id = I('student_id', 0, 'intval');        $name = I('name');        if (empty($name)) {            $this->error('请输入关系');        }        $Model = M();        $sinfo = $Model->table('__STUDENT__')->find($student_id);        if (empty($sinfo)) {            $this->error('未查找到您的孩子');        }        if ($minfo['phone'] == $sinfo['phone']) {            $data['family_ties'] = $name;        } elseif ($minfo['phone'] == $sinfo['phone2']) {            $data['family_ties2'] = $name;        } else {            $this->error('不是您的孩子');        }        $Model->table('__STUDENT__')->where($sinfo)->save($data);        //websocket广播        //查询出该班所有的家长的token        $tokens = $Model->table('__MEMBER__ m')->join('__STUDENT__ s on s.phone=m.phone or s.phone2=m.phone', 'left')->where(array('s.class_id' => $sinfo['class_id'], 'token' => array('neq', '')))->getField('token', true);        $interfaces = array('classMemberList', 'classPtaMemberList', 'getMember');        $this->success('', array($tokens, $interfaces));    }    /**     * 获取通知类型     */    public function getMessageType() {        $this->success(M('MessageType')->where(array('id' => array('neq', 1)))->select());    }    /**     * 发送消息     */    public function addMessage() {        $minfo = $this->minfo();        $cache_key = md5(implode($_POST));        if (S($cache_key) === true) {            $this->error('请不要重复发送相同的信息');        }        if (empty($minfo['teacher_id']) && empty($minfo['pta_id'])) {            $this->error('只有老师和家委会才能发布消息');        }        $class_id = I('class_id');        if (empty($class_id)) {            $this->error('缺少参数class_id');        }        if (!in_array($class_id, $minfo['can_send_message_class_ids'])) {            $this->error('不是您管理的班级');        }        $Message = D('Message');        $post = I('post.');        $post['member_id'] = $minfo['id'];        $group_id = I('group_id', 0, 'intval');        if (4 === $group_id) {            $student_ids = I('student_ids');            if (empty($student_ids)) {                $this->error('请勾选学生');            }            $Student = M('Student');            $Member = M('Member');            $phone_info = $Student->where(array('id' => array('in', $student_ids)))->getField('id,phone,phone2');            $phones = array();            foreach ($phone_info as $phone) {                if ($phone['phone']) {                    $phones[] = $phone['phone'];                }                if ($phone['phone2']) {                    $phones[] = $phone['phone2'];                }            }            if (empty($phones)) {                $this->error('没有可接受信息的家长');            }            $member_ids = $Member->where(array('phone' => array('in', $phones)))->getField('id', true);            $Message->member_ids = implode(',', $member_ids);        }        unset($post['id']);        $Message->startTrans();        if ((false === $data = $Message->create($post)) || (false === $insert_id = $Message->add())) {            $Message->rollback();            $this->error($Message->getError());        }        $member_ids = $Message->member_ids;        $Message->commit();        S($cache_key, true, 30);        $changegroup = array();        if (!empty($member_ids)) {            //通知服务器是需要更新的token            $Model = M();            $tokens = $Model->table('__MEMBER__')->where(array('id' => array('in', $member_ids), 'token' => array('neq', '')))->getField('token', true);            $interfaces = array('myMessageList', 'myMessageTap');            $changegroup[] = array($tokens, $interfaces);            // 广播发布者            $interfaces = array('mySendMessageList');            $changegroup[] = array(array($minfo['token']), $interfaces);        }        $this->success($insert_id, $changegroup);    }    /**     * 修改通知消息 只允许修改内容content 附件     */    public function editMessage() {        $minfo = $this->minfo();        $post['id'] = I('id');        $post['content'] = I('content');        $post['pics'] = I('pics');        if (empty($post['id'])) {            $this->error('缺少参数id');        }        if (empty($post['content'])) {            $this->error('内容不能为空');        }        $Message = M('Message');        $message_info = $Message->find($post['id']);        if (empty($message_info)) {            $this->error('不存在消息 id:' . $post['id']);        }        if ($message_info['member_id'] != $minfo['id']) {            $this->error('不是您的消息');        }        $Message->save($post);        $member_ids = M('MessageRead')->where(array('message_id' => $post['id']))->getField('member_id', true);        $changegroup = array();        if (!empty($member_ids)) {            //通知服务器是需要更新的token            $Model = M();            $tokens = $Model->table('__MEMBER__')->where(array('id' => array('in', $member_ids), 'token' => array('neq', '')))->getField('token', true);            $interfaces = array('myMessageList', 'myMessageTap');            $changegroup[] = array($tokens, $interfaces);            // 广播发布者            $interfaces = array('mySendMessageList');            $changegroup[] = array(array($minfo['token']), $interfaces);        }        $this->success('', $changegroup);    }    /**     * 登录     * @param string $username 用户名     * @param string $pwd 密码      * @return json  token     */    public function ulogin() {        $phone = I('phone');        $pwd = I('pwd');        $verify = I('verify');        if (empty($phone)) {            $this->error('缺少参数 phone');        }        if (!checkPhoneFormat($phone)) {            $this->error('手机号码格式错误');        }        if (empty($verify) && empty($pwd)) {            $this->error('请输入验证码或密码');        }        $Member = M('Member');        $minfo = $Member->getByPhone($phone);        if (empty($minfo)) {            $this->error('不存在的手机号');        }        if (!empty($pwd)) {            if (empty($minfo['pwd'])) {                $minfo['pwd'] = getencrypt(substr($phone, -6), $phone);//                $this->error('该账号还没设置密码，请使用短信验证码登录');            }            if (false === $encryptpwd = getencrypt($pwd, $phone)) {                $this->error('加密错误，请联系管理员');            }            if ($encryptpwd != $minfo['pwd']) {                $this->error('密码错误');            }        } else {            if ($verify != S('phone_verify' . $phone)) {                $this->error('验证码错误');            }        }        if (empty($minfo['token'])) {            $minfo['token'] = md5($phone . NOW_TIME . rand(10, 99));            $Member->where(array('id' => $minfo['id']))->setField('token', $minfo['token']);        }        if (empty($minfo['headerurl'])) {            $headerurl = I('headimgurl');            $save['headerurl'] = $headerurl;        }        if (empty($minfo['openid'])) {            $openid = I('openid');            $save['openid'] = $openid;        }        if (empty($minfo['nickname'])) {            $nickname = I('nickname');            $save['nickname'] = $nickname;        }        if (!empty($save)) {            $Member->where(array('id' => $minfo['id']))->save($save);        }        $this->_login($minfo['token']);    }    private function _login($token)    {        //通知服务器登录通知        $port = C('WEB_SOCKET_PORT');        $host = substr(C('WEB_DOMAIN'), 7, -1);        $Websocket = new \Lib\WebsocketClient($host, $port);        $connect_mode=I('connect_mode','weixin');        $willoffline['token']=$token;        $willoffline['connect_mode']=$connect_mode;        $willoffline['websocket_key']= md5($token.NOW_TIME.  rand(10, 99));        $send_data['willoffline']=$willoffline;        if (false === $Websocket->sendData($send_data)) {        }        //todo 这里返回一个长连接需要验证的key  websocket_key Event中 对应修改        $this->success(array('minfo'=>$this->minfo($token),'websocket_key'=>$willoffline['websocket_key']));    }    /**     * 获取验证码     */    public function getVerify() {        $phone = I('phone');        if (empty($phone)) {            $this->error('缺少参数 phone');        }        if (!checkPhoneFormat($phone)) {            $this->error('手机号码格式错误');        }        if (S('phone_verify' . $phone)) {            $this->error('该手机近期已经发送过验证码，请稍后再试');        }        $verify = rand(1000, 9999);        if (false === $res = send_mobile_message($verify, $phone)) {            $this->error('发送失败:' . $res['message'] . '(' . $res['code'] . ')');        }        S('phone_verify' . $phone, $verify, 60);        $this->success();    }    /**     * 判断自己是否存在未读消息     */    public function myMessageTap() {        $minfo = $this->minfo();        $MessageRead = M('MessageRead');        $map['member_id'] = $minfo['id'];        $map['is_read'] = 0;        $count = $MessageRead->where($map)->count();        $this->success($count);    }    /**     * 获取我的消息列表     * $cid 0 全部消息 1 未读消息 2 已读消息     * type 消息类型     * $p 页码     */    public function myMessageList() {        $minfo = $this->minfo();        $cid = I('cid', 0, 'intval');        if (!empty($cid)) {            if (1 === $cid) {                $map['mr.is_read'] = 0;            } elseif (2 === $cid) {                $map['mr.is_read'] = 1;            }        }        $type = I('type', '');        if ('' !== $type) {            $map['m.type'] = $type;        }        $p = I('p', 1, 'intval');        $Model = M();        $map['mr.member_id'] = $minfo['id'];        $count = $Model->table('__MESSAGE_READ__ mr')->join('__MESSAGE__ m on m.id=mr.message_id', 'left')->join('__MESSAGE_TYPE__ mt on m.type=mt.id', 'left')->where($map)->count();        $Page = new \Think\Page($count, 20);        $list = $Model->table('__MESSAGE_READ__ mr')                        ->join('__MESSAGE__ m on m.id=mr.message_id', 'left')                        ->join('__MESSAGE_TYPE__ mt on m.type=mt.id', 'left')                        ->join('__MEMBER__ mb on m.member_id=mb.id', 'left')->where($map)->field('m.member_id,mr.id,m.class_id,m.title ,m.content,mt.name type,mr.is_read,mb.real_name,mb.headerurl,mb.teacher_id,m.addtime')->order('m.addtime desc')->limit($Page->firstRow, $Page->listRows)->select();        $i = 0;        foreach ($list as &$v) {            $v['xh'] = $i++;            $v['content'] = htmlspecialchars_decode($v['content']);            $v['cinfo'] = $Model->table('__CLASS__')->where(array('id' => $v['class_id']))->find();            if ($v['member_id'] == 0) {                $v['headerurl'] = C('WEB_DOMAIN') . 'Public/images/logo.png';                $v['real_name'] = '系统消息';            }            if ($v['teacher_id'] > 0) {                $v['real_name'] = '班主任' . substr($v['real_name'], 0, 3) . '老师';            }        }        $this->success(array('data' => $list, 'p' => $p));    }    /**     * 获取发送的消息列表     */    public function mySendMessageList() {        $minfo = $this->minfo();        $p = I('p', 1, 'intval');        $type = I('type', 0, 'intval');        $gettype = I('gettype', 'nowpage');        if (!empty($type)) {            $map['m.type'] = $type;        }        $map['m.member_id'] = $minfo['id'];        $Model = M();        $count = $Model->table('__MESSAGE__ m')->join('__MESSAGE_TYPE__ mt on m.type=mt.id', 'left')->where($map)->count();        if ($gettype === 'nowpage') {            $Page = new \Think\Page($count, 5);            $list = $Model->table('__MESSAGE__ m')->join('__MESSAGE_TYPE__ mt on m.type=mt.id', 'left')->where($map)->field('*,m.*')->order('m.addtime desc')->limit($Page->firstRow, $Page->listRows)->select();            foreach ($list as &$info) {                $readinfo = $Model->table('__MESSAGE_READ__')->field('count(if(is_read=0,student_ids,null)) unreads,count(if(is_read=1,student_ids,null)) readeds,count(id) sendeds')->where(array('message_id' => $info['id']))->group('if(student_ids="",concat("_",id),student_ids)')->select();                $unreads = 0;                $readeds = 0;                foreach ($readinfo as $read) {                    $unreads+=$read['unreads'] > 0 ? 1 : 0;                    $readeds+=$read['readeds'] > 0 ? 1 : 0;                }                $info['unreads'] = $unreads;                $info['readeds'] = $readeds;                $info['content'] = htmlspecialchars_decode($info['content']);                $info['cinfo'] = $Model->table('__CLASS__')->where(array('id' => $info['class_id']))->find();                $info['type_name'] = $Model->table('__MESSAGE_TYPE__')->getFieldById($info['type'], 'name');                $info['comment_list'] = D('MessageComment')->where(array('message_id' => $info['id'], 'reply_id' => 0,'is_delete'=>0))->order('addtime')->select();                $info['comment_count'] = count($info['comment_list']);            }            $this->success(array('data' => $list, 'p' => $p, 'totalpages' => $Page->totalPages));        } else {            $lists = array();            $Page = new \Think\Page($count, 5);            $list = $Model->table('__MESSAGE__ m')->join('__MESSAGE_TYPE__ mt on m.type=mt.id', 'left')->where($map)->field('*,m.*')->order('m.addtime desc')->limit(0, $Page->firstRow + $Page->listRows)->select();            foreach ($list as &$info) {                                $readinfo = $Model->table('__MESSAGE_READ__')->field('count(if(is_read=0,student_ids,null)) unreads,count(if(is_read=1,student_ids,null)) readeds,count(id) sendeds')->where(array('message_id' => $info['id']))->group('if(student_ids="",concat("_",id),student_ids)')->select();                $unreads = 0;                $readeds = 0;                foreach ($readinfo as $read) {                    $unreads+=$read['unreads'] > 0 ? 1 : 0;                    $readeds+=$read['readeds'] > 0 ? 1 : 0;                }                $info['unreads'] = $unreads;                $info['readeds'] = $readeds;                $info['content'] = htmlspecialchars_decode($info['content']);                $info['cinfo'] = $Model->table('__CLASS__')->where(array('id' => $info['class_id']))->find();                $info['type_name'] = $Model->table('__MESSAGE_TYPE__')->getFieldById($info['type'], 'name');                                $info['comment_list'] = D('MessageComment')->where(array('message_id' => $info['id'], 'reply_id' => 0,'is_delete'=>0))->order('addtime')->select();                $info['comment_count'] = count($info['comment_list']);                            }            for ($i = 0; $i < $p;  ++$i) {                                $onelist = array();                for ($j = 0; $j < 5;  ++$j) {                    if (!empty($list[$i * 5 + $j])) {                        $onelist[] = $list[$i * 5 + $j];                    }                }                if (!empty($onelist)) {                    $lists[$i+1] = $onelist;                }                            }            $this->success(array('data' => $lists, 'p' => $p, 'totalpages' => $Page->totalPages));        }    }    /**     * 读取消息 接收方     */    public function readMessage() {        $minfo = $this->minfo();        $id = I('id', 0, 'intval');        $Model = M();        $map['mr.id'] = $id;        $info = $Model->table('__MESSAGE_READ__ mr')                ->join('__MESSAGE__ m on m.id=mr.message_id', 'left')                ->join('__MESSAGE_TYPE__ mt on m.type=mt.id', 'left')                ->where($map)->field('m.id,m.member_id send_member_id,mr.student_ids,mr.id mrid,m.title,m.pics,m.content,mr.member_id,mt.name,mr.is_read,m.addtime,m.class_id,group_concat(mr.member_id) othermids')                ->group('m.id')                ->find();        if ($info['member_id'] != $minfo['id']) {            $this->error('不是您的消息');        }        $readinfo = $Model->table('__MESSAGE_READ__')->field('count(if(is_read=0,student_ids,null)) unreads,count(if(is_read=1,student_ids,null)) readeds')->where(array('message_id' => $info['id']))->group('if(student_ids="",concat("_",id),student_ids)')->select();        $unreads = 0;        $readeds = 0;        foreach ($readinfo as $read) {            $unreads+=$read['unreads'] > 0 ? 1 : 0;            $readeds+=$read['readeds'] > 0 ? 1 : 0;        }        $info['pics_arr']=empty($info['pics'])?"":explode(',', $info['pics']);        $info['unreadnums'] = $unreads;        $info['readnums'] = $readeds;        $changegroup = array();        if ($info['is_read'] == 0) {            $data['is_read'] = 1;            $data['readtime'] = NOW_TIME;            if (!empty($info['student_ids'])) {                $Model->table('__MESSAGE_READ__')->where(array('student_ids' => $info['student_ids'], 'message_id' => $info['id']))->save($data);            } else {                $Model->table('__MESSAGE_READ__')->where(array('id' => $info['mrid']))->save($data);            }            $info['readnums'] ++;            $info['unreadnums'] --;            //广播发布者            $sendminfo = $Model->table('__MEMBER__')->find($info['send_member_id']);            $changegroup[] = array(array($sendminfo['token']), array('mySendMessageList', 'openMessage'));            //广播其他人            if (!empty($info['othermids'])) {                $othertoken = $Model->table('__MEMBER__')->where(array('token' => array('neq', ''), 'id' => array('in', $info['othermids'])))->getField('token', true);                $changegroup[] = array($othertoken, array('myMessageList', 'readMessage'));            }        }        $info['content'] = htmlspecialchars_decode($info['content']);        $info['cinfo'] = $Model->table('__CLASS__')->where(array('id' => $info['class_id']))->find();        $sendminfo = $this->minfo('', $info['send_member_id']);        if (empty($sendminfo)) {            $sendminfo['headerurl'] = C('WEB_DOMAIN') . 'Public/images/logo.png';            $sendminfo['real_name'] = '系统消息';        }        $info['minfo'] = $sendminfo;        $info['comment_list'] = D('MessageComment')->where(array('message_id' => $info['id'], 'reply_id' => 0,'is_delete'=>0))->order('addtime')->select();        $info['comment_count'] = count($info['comment_list']);        $this->success($info, $changegroup);    }    /**     * 打开消息 发送方     */    public function openMessage() {        $minfo = $this->minfo();        $id = I('id', 0, 'intval');        if (empty($id)) {            $this->error('请选择消息');        }        $Model = M();        $map['m.id'] = $id;        $info = $Model->table('__MESSAGE__ m')->join('__MESSAGE_READ__ mr on m.id=mr.message_id', 'left')->join('__MESSAGE_TYPE__ mt on m.type=mt.id', 'left')->where($map)->field('m.id,m.title,m.content,m.pics,m.member_id,mt.name,mr.is_read,m.addtime,m.class_id')->find();        if ($info['member_id'] != $minfo['id']) {            $this->error('不是您的消息');        }                $info['pics_arr']=empty($info['pics'])?"":explode(',', $info['pics']);        $Student = M('Student');        //已经读取的用户列表        $readlists = $Model->table('__MEMBER__ m ')->join('__MESSAGE_READ__ mr on m.id=mr.member_id', 'left')->join('__STUDENT__ s on s.phone=m.phone or s.phone2=m.phone', 'left')->where(array('mr.message_id' => $info['id'], 'mr.is_read' => 1, '_string' => ' s.class_id=' . $info['class_id'] . ' or s.class_id is null'))->order('s.name')->field('m.*,group_concat(DISTINCT m.real_name) real_name')->group('if(s.class_id is null,concat("_",m.id),mr.student_ids)')->select();        $info['readlist'] = array();        $newreadlists = array();        foreach ($readlists as $readlist) {            $pname = $readlist['real_name'];            $suns = $Student->where(array('phone|phone2' => $readlist['phone']))->select();            foreach ($suns as $sun) {                if (!array_key_exists($readlist['id'], $newreadlists)) {                    $readlist['real_name'] = $sun['name'];                    $newreadlists[$readlist['id']] = $readlist;                } else {                    $newreadlists[$readlist['id']]['real_name'].=',' . $sun['name'];                }            }            if ($pname) {                if (!empty($newreadlists[$readlist['id']]['real_name'])) {                    $newreadlists[$readlist['id']]['real_name'].='(' . $pname . ')';                } else {                    $subject_info = $Model->table('__TEACHER_SUBJECT_CLASS_ACCESS__ tsca')->join('__SUBJECT__ s on s.id=tsca.subject_id', 'left')->where(array('tsca.teacher_id' => $readlist['teacher_id']))->find();                    $newreadlists[$readlist['id']] = $readlist;                    $newreadlists[$readlist['id']]['real_name'] = $subject_info['name'] . '老师(' . $pname . ')';                }            }        }        $info['readlist'] = array_values($newreadlists);        $unreadlists = $Model->table('__MEMBER__ m ')->join('__MESSAGE_READ__ mr on m.id=mr.member_id', 'left')->join('__STUDENT__ s on s.phone=m.phone or s.phone2=m.phone', 'left')->where(array('mr.message_id' => $info['id'], 'mr.is_read' => 0, '_string' => ' s.class_id=' . $info['class_id'] . ' or s.class_id is null'))->order('s.name')->field('m.*,group_concat(DISTINCT m.real_name) real_name')->group('if(s.class_id is null,concat("_",m.id),mr.student_ids)')->select();        $info['unreadlist'] = array();        $newunreadlists = array();        foreach ($unreadlists as $unreadlist) {            $pname = $unreadlist['real_name'];            $suns = $Student->where(array('phone|phone2' => $unreadlist['phone']))->select();            foreach ($suns as $sun) {                if (!array_key_exists($unreadlist['id'], $newunreadlists)) {                    $unreadlist['real_name'] = $sun['name'];                    $newunreadlists[$unreadlist['id']] = $unreadlist;                } else {                    $newunreadlists[$unreadlist['id']]['real_name'].=',' . $sun['name'];                }            }            if ($pname) {                if (!empty($newunreadlists[$unreadlist['id']]['real_name'])) {                    $newunreadlists[$unreadlist['id']]['real_name'].='(' . $pname . ')';                } else {                    $subject_info = $Model->table('__TEACHER_SUBJECT_CLASS_ACCESS__ tsca')->join('__SUBJECT__ s on s.id=tsca.subject_id', 'left')->where(array('tsca.teacher_id' => $unreadlist['teacher_id']))->find();                    $newunreadlists[$unreadlist['id']] = $unreadlist;                    $newunreadlists[$unreadlist['id']]['real_name'] = $subject_info['name'] . '老师(' . $pname . ')';                }            }        }        $info['unreadlist'] = array_values($newunreadlists);        $info['content'] = htmlspecialchars_decode($info['content']);        if ($info['class_id']) {            $info['cinfo'] = $Model->table('__CLASS__')->where(array('id' => $info['class_id']))->find();        }        $info['comment_list'] = D('MessageComment')->where(array('message_id' => $info['id'], 'reply_id' => 0,'is_delete'=>0))->order('addtime')->select();        $info['comment_count'] = count($info['comment_list']);        $this->success($info);    }    /**     * 设置家委会     * class_id     * job 0 普通家委会  1 出纳     * member_id 选择的成员     */    public function setPta() {        $minfo = $this->minfo();        $class_id = I('class_id', 0, 'intval');        if (empty($class_id)) {            $this->error('请选择班级');        }        if (empty($minfo['tinfo'])) {            $this->error('您还不是老师');        }        if ($minfo['tinfo']['master_class_id'] != $class_id) {            $this->error('您不是该班班主任');        }        $member_ids = I('member_ids');        if (empty($member_ids)) {            $this->error('请选择班级成员');        }        $member_ids = explode(',', $member_ids);        if (empty($member_ids)) {            $this->error('请选择班级成员');        }        //去掉重复 避免多次操作        $member_ids = array_unique($member_ids);        $Model = M();        $Model->startTrans();        foreach ($member_ids as $member_id) {            //获取选择成员的信息            $that_minfo = $this->minfo('', $member_id);            if (empty($that_minfo)) {                $this->error('不存在的成员');            }            $inclass = false;            foreach ($that_minfo['my_classes'] as $class) {                if ($class['id'] == $class_id) {                    $inclass = true;                    break;                }            }            if (!$inclass) {                $this->error('所选成员不是班级成员');            }            if (empty($that_minfo['pta_id'])) {                $old_pta_id_arr = array();            } else {                $old_pta_id_arr = explode(',', $that_minfo['pta_id']);            }            if (!in_array($class_id, $that_minfo['pta_class_ids'])) {                $ptaadddata['class_id'] = $class_id;                //家委会表新增                $pta_id = $Model->table('__PTA__')->add($ptaadddata);                //更新member表                $old_pta_id_arr[] = $pta_id;                $Model->table('__MEMBER__')->where(array('id' => $member_id))->setField('pta_id', implode(',', $old_pta_id_arr));            } else {                //家委会表删除                $pta_id = $Model->table('__PTA__')->where(array('class_id' => $class_id, 'id' => array('in', $old_pta_id_arr)))->getField('id');                $Model->table('__PTA__')->delete($pta_id);                array_unset($old_pta_id_arr, $pta_id);                //更新member表                $Model->table('__MEMBER__')->where(array('id' => $member_id))->setField('pta_id', implode(',', $old_pta_id_arr));            }        }        $Model->commit();        $cinfos = $this->cinfo($class_id);        //所有人的getmember需要更新        //:todo//        $tokens=$Model->table('__MEMBER__')->where(array('token'=>array('neq','')))->getField('token',true);//        $this->_sendSocket('getMember', $tokens, $data);        $this->success($cinfos[0]);    }    public function setPtaJob() {        $minfo = $this->minfo();        $class_id = I('class_id', 0, 'intval');        if (empty($class_id)) {            $this->error('请选择班级');        }        if (empty($minfo['tinfo'])) {            $this->error('您还不是老师');        }        if ($minfo['tinfo']['master_class_id'] != $class_id) {            $this->error('您不是该班班主任');        }        $pta_id = I('id', 0, 'intval');        if (empty($pta_id)) {            $this->error('请选择家委会成员');        }        $Pta = M('Pta');        $pinfo = $Pta->find($pta_id);        if (empty($pinfo)) {            $this->error('不存在的家委会成员');        }        if ($pinfo['class_id'] != $class_id) {            $this->error('不是您班的家委会成员');        }        //下职        $Pta->where(array('class_id' => $class_id, 'job' => 1))->setField('job', 0);        //上职        $Pta->where(array('id' => $pta_id))->setField('job', 1);        $this->success();    }    public function setPtaToupiao() {        $minfo = $this->minfo();        $class_id = I('class_id', 0, 'intval');        if (empty($class_id)) {            $this->error('请选择班级');        }        if (empty($minfo['tinfo'])) {            $this->error('您还不是老师');        }        if ($minfo['tinfo']['master_class_id'] != $class_id) {            $this->error('您不是该班班主任');        }        $pta_id = I('id');        if (empty($pta_id)) {            $this->error('请选择家委会成员');        }        $Pta = M('Pta');        $pinfos = $Pta->where(array('id'=>array('in',$pta_id)))->select();        if (empty($pinfos)) {            $this->error('不存在的家委会成员');        }        $inclass=false;        foreach ($pinfos as $pinfo)        {            if ($pinfo['class_id'] == $class_id) {                $inclass=true;                $edit_pta_id=$pinfo['id'];                continue;            }                    }                //上职        $can_toupiao = $Pta->where(array('id' => $edit_pta_id))->getField('can_toupiao');        if ($can_toupiao == 1) {            $Pta->where(array('id' => $edit_pta_id))->setField('can_toupiao', 0);        } else {            $Pta->where(array('id' => $edit_pta_id))->setField('can_toupiao', 1);        }        $this->success($this->minfo());    }    /**     * 发布支出申请     */    public function outpayApply() {        $cache_key = md5(implode($_POST));        if (S($cache_key) === true) {            $this->error('请不要重复发送相同的信息');        }        $class_id = I('class_id');        $student_ids = I('student_ids'); //多个逗号分隔        $is_payfor = I('is_payfor', 0, 'intval'); //0 这些student_ids 要分摊钱 1 这些student_ids 要不分摊钱         if ($is_payfor == 0) {            if (empty($student_ids)) {                $this->error('没有扣钱的学生');            }        }        if (!empty($student_ids)) {            $student_ids = explode(',', $student_ids);        }        if (empty($class_id)) {            $this->error('请选择班级');        }        $Stutend = M('Student');        if ($is_payfor == 0) {            //判断是否该班学生            foreach ($student_ids as $student_id) {                $stinfo = $Stutend->find($student_id);                if ($class_id != $stinfo['class_id']) {                    $this->error('不是该班成员');                }            }        } else {            $student_ids = $Stutend->where(array('class_id' => $class_id, 'id' => array('not in', $student_ids)))->getField('id', true);        }        $student_ids = implode(',', $student_ids);        $minfo = $this->minfo();        if (!in_array($class_id, $minfo['teach_class_ids']) && !in_array($class_id, $minfo['pta_class_ids'])) {            if (!in_array($class_id, $minfo['teach_class_ids'])) {                $this->error('您不是该班教师，不能发布支出申请');            } else {                $this->error('您不是该班家委会，不能发布支出申请');            }        }        if (in_array($class_id, $minfo['pta_class_ids'])) {            $pta_info = M('Pta')->where(array('class_id' => $class_id, 'id' => array('in', $minfo['pta_id'])))->find();            if (!$pta_info['can_toupiao']) {                $this->error('您不是财务家委会，不能发布申请');            }        }        $OutpayApply = D('OutpayApply');        $post = I('post.');        $post['member_id'] = $minfo['id'];        $post['student_ids'] = $student_ids;        $OutpayApply->startTrans();        if (false === $OutpayApply->create($post) || false === $OutpayApply->add()) {            $OutpayApply->rollback();            $this->error($OutpayApply->getError());        }        $OutpayApply->commit();        S($cache_key, true, 30);        $this->success();    }    public function readApply() {        $minfo = $this->minfo();        $app_id = I('id', 0, 'intval');        if (empty($app_id)) {            $this->error('请选择申请id');        }        $OutpayApply = D('OutpayApply');        if (false === $oinfo = $OutpayApply->find($app_id)) {            $this->error($OutpayApply->getError());        }        if (empty($oinfo)) {            $this->error('该申请不存在');        }        if (empty($minfo['ptainfo']) || $minfo['ptainfo']['class_id'] != $oinfo['class_id']) {            $this->error('您不是该申请单班级家委会成员');        }        $oinfo['apply_member_info'] = $this->minfo('', $oinfo['member_id']);        $oinfo['content'] = htmlspecialchars_decode($oinfo['content']);        $Toupiao = M('Toupiao');        $oinfo['can_toupiao'] = false;        if ($oinfo['is_check'] == 0) {            //如果是本班家委会            if (in_array($oinfo['class_id'], $minfo['pta_class_ids'])) {                //如果为投票                $yitou = $Toupiao->where(array('app_id' => $oinfo['id'], 'pta_id' => array('in', $minfo['pta_class_ids']), 'is_pass' => 1))->find();                if (empty($yitou)) {                    $oinfo['can_toupiao'] = true;                }            }        }        $this->success($oinfo);    }    /**     * 查看申请详细     */    public function getApplyList() {        $minfo = $this->minfo();        $class_id = I('class_id', 0, 'intval');        $is_check = I('is_check', '', 'intval');        if (empty($class_id)) {            $this->error('请选择班级');        }        if (!in_array($class_id, $minfo['stu_class_ids']) && !in_array($class_id, $minfo['teach_class_ids'])) {            $this->error('不是您管理的班级');        }        $OutpayApply = D('OutpayApply');        $map['class_id'] = $class_id;        if ('' !== $is_check) {            $map['is_check'] = $is_check;        }        $count = $OutpayApply->where($map)->count();        $Page = new \Think\Page($count);        if (false === $list = $OutpayApply->where($map)->order('addtime desc')->limit($Page->firstRow, $Page->listRows)->select()) {            $this->error($OutpayApply->getError());        }        $Toupiao = M('Toupiao');        foreach ($list as &$v) {            $v['can_toupiao'] = false;            if ($v['is_check'] == 0) {                //如果是本班家委会                if (in_array($v['class_id'], $minfo['pta_class_ids'])) {                    //如果为投票                    $yitou = $Toupiao->where(array('app_id' => $v['id'], 'pta_id' => array('in', $minfo['pta_id']), 'is_pass' => 1))->find();                    if (empty($yitou)) {                        $v['can_toupiao'] = true;                    }                }            }            $v['content'] = htmlspecialchars_decode($v['content']);            if(!empty($v['pics']))            {                $v['app_pics'] = explode(',', $v['pics']);            }            else{                $v['app_pics']='';            }        }        $this->success(array('data' => $list, 'p' => I('p', 1, 'intval')));    }    public function toupiao() {        $minfo = $this->minfo();        $app_id = I('id', 0, 'intval');        $is_pass = I('is_pass', 0, 'intval');        $note = I('note');        if (empty($app_id)) {            $this->error('请选择申请id');        }        $OutpayApply = D('OutpayApply');        if (false === $oinfo = $OutpayApply->find($app_id)) {            $this->error($OutpayApply->getError());        }        if (empty($oinfo)) {            $this->error('该申请不存在');        }        if (empty($minfo['ptainfo']) || !in_array($oinfo['class_id'], $minfo['pta_class_ids'])) {            $this->error('您不是该申请单班级家委会成员');        }        if ($is_pass != '1' && empty($note)) {            $this->error('请填写拒绝理由');        }        $data['app_id'] = $app_id;        $data['is_pass'] = $is_pass;        $data['note'] = $note;        $pta_info = M('Pta')->where(array('class_id' => $oinfo['class_id'], 'id' => array('in', $minfo['pta_id'])))->find();        if (!$pta_info['can_toupiao']) {            $this->error('您没有投票权限');        }        $data['pta_id'] = $pta_info['id'];        $Toupiao = D('Toupiao');        $Toupiao->startTrans();        if (false === $Toupiao->create($data) || false === $Toupiao->add()) {            $Toupiao->rollback();            $this->error($Toupiao->getError());        }        $Toupiao->commit();        $this->success();    }    public function getSubjects() {        $this->success(M('Subject')->select());    }    /**     * 发布作业     */    public function addHomework() {        $minfo = $this->minfo();        $cache_key = md5(implode($_POST));        if (S($cache_key) === true) {            $this->error('请不要重复发送相同的信息');        }        if (empty($minfo['teacher_id'])) {            $this->error('只有老师才能发布作业');        }        $class_id = I('class_id');        if (empty($class_id)) {            $this->error('缺少参数class_id');        }        if (!in_array($class_id, $minfo['can_send_message_class_ids'])) {            $this->error('不是您管理的班级');        }        $Homework = D('Homework');        $post = I('post.');        $post['member_id'] = $minfo['id'];        unset($post['id']);        $Homework->startTrans();        if ((false === $data = $Homework->create($post)) || (false === $insert_id = $Homework->add())) {            $Homework->rollback();            $this->error($Homework->getError());        }        $Homework->commit();        S($cache_key, true, 30);        $changegroup = array();        $member_ids = M('HomeworkRead')->where(array('homework_id' => $insert_id))->getField('member_id', true);        if (!empty($member_ids)) {            //通知服务器是需要更新的token            $Model = M();            $tokens = $Model->table('__MEMBER__')->where(array('id' => array('in', $member_ids), 'token' => array('neq', '')))->getField('token', true);            $interfaces = array('myHomeworkList', 'getNewstHomeworks');            $changegroup[] = array($tokens, $interfaces);            // 广播发布者            $interfaces = array('mySendHomeworkList');            $changegroup[] = array(array($minfo['token']), $interfaces);        }        $this->success($insert_id, $changegroup);    }    /**     * 修改通知消息 只允许修改内容content 附件     */    public function editHomework() {        $minfo = $this->minfo();        $post['id'] = I('id');        $post['content'] = I('content');        $post['pics'] = I('pics');        if (empty($post['id'])) {            $this->error('缺少参数id');        }        if (empty($post['content'])) {            $this->error('内容不能为空');        }        $Homework = M('Homework');        $homework_info = $Homework->find($post['id']);        if (empty($homework_info)) {            $this->error('不存在作业 id:' . $post['id']);        }        if ($homework_info['member_id'] != $minfo['id']) {            $this->error('不是您的消息');        }        $Homework->save($post);        $member_ids = M('HomeworkRead')->where(array('homework_id' => $post['id']))->getField('member_id', true);        $changegroup = array();        if (!empty($member_ids)) {            //通知服务器是需要更新的token            $Model = M();            $tokens = $Model->table('__MEMBER__')->where(array('id' => array('in', $member_ids), 'token' => array('neq', '')))->getField('token', true);            $interfaces = array('myHomeworkList', 'getNewstHomeworks');            $changegroup[] = array($tokens, $interfaces);            // 广播发布者            $interfaces = array('mySendHomeworkList');            $changegroup[] = array(array($minfo['token']), $interfaces);        }        $this->success('', $changegroup);    }    /**     * 获取最新各个科目作业     */    public function getNewstHomeworks() {        $class_id = I('class_id', 0, 'intval');        if (empty($class_id)) {            $this->error('请选择班级');        }        $minfo = $this->minfo();        $Model = M();        $map['hr.member_id'] = $minfo['id'];        $map['h.class_id'] = $class_id;        $subjects = $Model->table('__SUBJECT__')->select();        foreach ($subjects as &$subject) {            $map['h.subject_id'] = $subject['id'];            $subject['homework'] = $Model->table('__HOMEWORK_READ__ hr')->join('__HOMEWORK__ h on h.id=hr.homework_id', 'left')->join('__MEMBER__ m on h.member_id=m.id', 'left')->where($map)->field('hr.id,h.title, h.content,hr.is_read,m.real_name,h.addtime,h.class_id')->order('h.addtime desc')->find();            if ($subject['homework']) {                $subject['homework']['content'] = htmlspecialchars_decode($subject['homework']['content']);                $subject['homework']['headerurl'] = $subject['img'];            } else {                $subject['homework'] = array();            }            if ($subject['homework']['real_name']) {                $subject['homework']['real_name'] = $subject['homework']['subject'] . substr($subject['homework']['real_name'], 0, 3) . '老师';            }            $subject['cinfo'] = $Model->table('__CLASS__')->where(array('id' => $subject['homework']['class_id']))->find();        }        $this->success($subjects);    }    public function myHomeworkList() {        $minfo = $this->minfo();        $cid = I('cid', 0, 'intval');        $subject_id = I('subject_id', 0, 'intval');        if (!empty($cid)) {            if (1 === $cid) {                $map['hr.is_read'] = 0;            } elseif (2 === $cid) {                $map['hr.is_read'] = 1;            }        }        if (!empty($subject_id)) {            $map['h.subject_id'] = $subject_id;        }        $p = I('p', 1, 'intval');        $Model = M();        $map['hr.member_id'] = $minfo['id'];        $count = $Model->table('__HOMEWORK_READ__ hr')->join('__HOMEWORK__ h on h.id=hr.homework_id', 'left')->count();        $Page = new \Think\Page($count, 5);        $list = $Model->table('__HOMEWORK_READ__ hr')                        ->join('__HOMEWORK__ h on h.id=hr.homework_id', 'left')                        ->join('__MEMBER__ m on h.member_id=m.id', 'left')                        ->where($map)                        ->field('hr.id,h.class_id,h.title, h.content,hr.is_read,m.real_name,m.headerurl,m.teacher_id,h.addtime')                        ->order('h.addtime desc')->limit($Page->firstRow, $Page->listRows)->select();        $i = 0;        foreach ($list as &$v) {            $v['xh'] = $i++;            $v['content'] = htmlspecialchars_decode($v['content']);            $v['cinfo'] = $Model->table('__CLASS__')->where(array('id' => $v['class_id']))->find();            $v['subject'] = $Model->table('__TEACHER_SUBJECT_CLASS_ACCESS__ tsca')->join('__SUBJECT__ s on s.id=tsca.subject_id', 'left')->where(array('tsca.teacher_id' => $v['teacher_id'], 'class_id' => $v['class_id']))->getField('s.name');            $master_class_id = $Model->table('__TEACHER__')->where(array('id' => $v['teacher_id']))->getField('master_class_id');            if ($master_class_id == $v['class_id']) {                $v['real_name'] = '班主任' . substr($v['real_name'], 0, 3) . '老师';            } else {                $v['real_name'] = $v['subject'] . substr($v['real_name'], 0, 3) . '老师';            }        }        $this->success(array('data' => $list, 'p' => $p));    }    /**     * 获取发送的消息列表     */    public function mySendHomeworkList() {        $minfo = $this->minfo();        $p = I('p', 1, 'intval');        $gettype = I('gettype', 'nowpage');        $Model = M();        $map['member_id'] = $minfo['id'];        $count = $Model->table('__HOMEWORK__')->where($map)->count();        $Page = new \Think\Page($count, 5);        if($gettype==='nowpage')        {            $list = $Model->table('__HOMEWORK__')->where($map)->order('addtime desc')->limit($Page->firstRow, $Page->listRows)->select();            foreach ($list as &$info) {                $readinfo = $Model->table('__HOMEWORK_READ__')->field('count(if(is_read=0,student_ids,null)) unreads,count(if(is_read=1,student_ids,null)) readeds,count(id) sendeds')->where(array('homework_id' => $info['id']))->group('student_ids')->select();                $unreads = 0;                $sendeds = 0;                $readeds = 0;                foreach ($readinfo as $read) {                    $unreads+=$read['unreads'] > 0 ? 1 : 0;                    $sendeds+=$read['sendeds'] > 0 ? 1 : 0;                    $readeds+=$read['readeds'] > 0 ? 1 : 0;                }                $info['unreads'] = $unreads;                $info['sendeds'] = $sendeds;                $info['readeds'] = $readeds;                $info['content'] = htmlspecialchars_decode($info['content']);                $info['cinfo'] = $Model->table('__CLASS__')->where(array('id' => $info['class_id']))->find();                $info['comment_list'] = D('HomeworkComment')->where(array('homework_id' => $info['id'], 'reply_id' => 0,'is_delete'=>0))->order('addtime')->select();                $info['comment_count'] = count($info['comment_list']);            }            $this->success(array('data' => $list, 'p' => $p));        }        else        {            $list = $Model->table('__HOMEWORK__')->where($map)->order('addtime desc')->limit(0,$Page->firstRow+$Page->listRows)->select();            foreach ($list as &$info) {                $readinfo = $Model->table('__HOMEWORK_READ__')->field('count(if(is_read=0,student_ids,null)) unreads,count(if(is_read=1,student_ids,null)) readeds,count(id) sendeds')->where(array('homework_id' => $info['id']))->group('student_ids')->select();                $unreads = 0;                $sendeds = 0;                $readeds = 0;                foreach ($readinfo as $read) {                    $unreads+=$read['unreads'] > 0 ? 1 : 0;                    $sendeds+=$read['sendeds'] > 0 ? 1 : 0;                    $readeds+=$read['readeds'] > 0 ? 1 : 0;                }                $info['unreads'] = $unreads;                $info['sendeds'] = $sendeds;                $info['readeds'] = $readeds;                $info['content'] = htmlspecialchars_decode($info['content']);                $info['cinfo'] = $Model->table('__CLASS__')->where(array('id' => $info['class_id']))->find();                $info['comment_list'] = D('HomeworkComment')->where(array('homework_id' => $info['id'], 'reply_id' => 0,'is_delete'=>0))->order('addtime')->select();                $info['comment_count'] = count($info['comment_list']);            }            for ($i = 0; $i < $p;  ++$i) {                                $onelist = array();                for ($j = 0; $j < 5;  ++$j) {                    if (!empty($list[$i * 5 + $j])) {                        $onelist[] = $list[$i * 5 + $j];                    }                }                if (!empty($onelist)) {                    $lists[$i+1] = $onelist;                }                            }            $this->success(array('data' => $lists, 'p' => $p));        }    }    /**     * 读取作业 接收方     */    public function readHomework() {        $minfo = $this->minfo();        $id = I('id', 0, 'intval');        $Model = M();        $map['hr.id'] = $id;        $info = $Model->table('__HOMEWORK_READ__ hr')                        ->join('__HOMEWORK__ h on h.id=hr.homework_id', 'left')                        ->where($map)->field('h.id,h.member_id send_member_id,h.subject_id,hr.id hrid,hr.student_ids,h.title,h.content,hr.member_id,hr.is_read,h.addtime,h.class_id,h.pics')->find();        if ($info['member_id'] != $minfo['id']) {            $this->error('不是您的消息');        }        $readinfo = $Model->table('__HOMEWORK_READ__')->field('count(if(is_read=0,student_ids,null)) unreads,count(if(is_read=1,student_ids,null)) readeds,count(id) sendeds')->where(array('homework_id' => $info['id']))->group('student_ids')->select();        $unreads = 0;        $readeds = 0;        foreach ($readinfo as $read) {            $unreads+=$read['unreads'] > 0 ? 1 : 0;            $readeds+=$read['readeds'] > 0 ? 1 : 0;        }        $info['unreadnums'] = $unreads;        $info['readnums'] = $readeds;        if ($info['is_read'] == 0) {            $data['is_read'] = 1;            $data['readtime'] = NOW_TIME;            if (!empty($info['student_ids'])) {                $Model->table('__HOMEWORK_READ__')->where(array('student_ids' => $info['student_ids'], 'homework_id' => $info['id']))->save($data);            } else {                $Model->table('__HOMEWORK_READ__')->where(array('id' => $info['hrid']))->save($data);            }            $info['readnums'] ++;            $info['unreadnums'] --;        }        $info['content'] = htmlspecialchars_decode($info['content']);        $info['cinfo'] = $Model->table('__CLASS__')->where(array('id' => $info['class_id']))->find();        $info['minfo'] = $this->minfo('', $info['send_member_id']);        $info['comment_list'] = D('HomeworkComment')->where(array('homework_id' => $info['id'], 'reply_id' => 0, 'is_delete' => 0))->order('addtime')->select();        $info['comment_count'] = count($info['comment_list']);        $this->success($info);    }    /**     * 打开作业息 发送方     */    public function openHomework() {        $minfo = $this->minfo();        $id = I('id', 0, 'intval');        if (empty($id)) {            $this->error('请选择消息');        }        $Model = M();        $map['h.id'] = $id;        $info = $Model->table('__HOMEWORK__ h')->join('__HOMEWORK_READ__ hr on h.id=hr.homework_id', 'left')->where($map)->field('h.id,hr.id hrid,h.title,h.content,h.member_id,hr.is_read,h.addtime,h.class_id,h.pics')->find();        if ($info['member_id'] != $minfo['id']) {            $this->error('不是您的消息');        }        $Student = M('Student');        //已经读取的用户列表        $readlists = $Model->table('__MEMBER__ m ')->join('__HOMEWORK_READ__ hr on m.id=hr.member_id', 'left')->join('__STUDENT__ s on s.phone=m.phone or s.phone2=m.phone', 'left')->where(array('hr.homework_id' => $info['id'], 'hr.is_read' => 1, 's.class_id' => $info['class_id']))->order('s.name')->field('m.*,group_concat(DISTINCT m.real_name) real_name')->group('hr.student_ids')->select();        $info['readlist'] = array();        $newreadlists = array();        foreach ($readlists as $readlist) {            $pname = $readlist['real_name'];            $suns = $Student->where(array('phone|phone2' => $readlist['phone'], 'class_id' => $info['class_id']))->select();            foreach ($suns as $sun) {                if (!array_key_exists($readlist['id'], $newreadlists)) {                    $readlist['real_name'] = $sun['name'];                    $newreadlists[$readlist['id']] = $readlist;                } else {                    $newreadlists[$readlist['id']]['real_name'].=',' . $sun['name'];                }            }            if ($pname) {                $newreadlists[$readlist['id']]['real_name'].='(' . $pname . ')';            }        }        $info['readlist'] = array_values($newreadlists);        $unreadlists = $Model->table('__MEMBER__ m ')->join('__HOMEWORK_READ__ hr on m.id=hr.member_id', 'left')->join('__STUDENT__ s on s.phone=m.phone or s.phone2=m.phone', 'left')->where(array('hr.homework_id' => $info['id'], 'hr.is_read' => 0, 's.class_id' => $info['class_id']))->order('s.name')->field('m.*,group_concat(DISTINCT m.real_name) real_name')->group('hr.student_ids')->select();        $info['unreadlist'] = array();        $newunreadlists = array();        foreach ($unreadlists as $unreadlist) {            $pname = $unreadlist['real_name'];            $suns = $Student->where(array('phone|phone2' => $unreadlist['phone'], 'class_id' => $info['class_id']))->select();            foreach ($suns as $sun) {                if (!array_key_exists($unreadlist['id'], $newunreadlists)) {                    $unreadlist['real_name'] = $sun['name'];                    $newunreadlists[$unreadlist['id']] = $unreadlist;                } else {                    $newunreadlists[$unreadlist['id']]['real_name'].=',' . $sun['name'];                }            }            if ($pname) {                $newunreadlists[$unreadlist['id']]['real_name'].='(' . $pname . ')';            }        }        $info['unreadlist'] = array_values($newunreadlists);        $info['content'] = htmlspecialchars_decode($info['content']);        $info['cinfo'] = $Model->table('__CLASS__')->where(array('id' => $info['class_id']))->find();        $info['comment_list'] = D('HomeworkComment')->where(array('homework_id' => $info['id'], 'reply_id' => 0, 'is_delete' => 0))->order('addtime')->select();        $info['comment_count'] = count($info['comment_list']);        $this->success($info);    }    /**     * 学生各人账户明细     */    public function myMoneyDetail() {        $student_id = I('id', 0, 'intval');        if (empty($student_id)) {            $this->error('请选择小孩');        }        $StudentMoneyLog = M('StudentMoneyLog');        $map['student_id'] = $student_id;        $list = $StudentMoneyLog->where($map)->order('addtime desc')->group('themounth')->field('sum(if(type=1,money,0)) moneys,FROM_UNIXTIME(addtime,\'%Y-%m\') as themounth')->select();        foreach ($list as &$one) {            if ($one['themounth'] == date('Y-m')) {                $etime = strtotime($one['themounth'] . date('-d'));            } else {                $etime = strtotime($one['themounth'] . date('-t', strtotime($one['themounth'] . '-01')));            }            $one['detail'] = $StudentMoneyLog->where($map)->where(array('addtime' => array('between', array(strtotime($one['themounth'] . '-01'), $etime + 3600 * 24 - 1))))->order('id desc')->select();            if (empty($one['detail'])) {                $one['detail'][0]['now_money'] = $StudentMoneyLog->where($map)->where(array('addtime' => array('lt', strtotime($one['themounth'] . '-01') + 3600 * 24 - 1)))->order('id desc')->getField('now_money');            }        }        $this->success($list);    }    /**     * 班级账户明细     */    public function classMoneyDetail() {        $class_id = I('class_id', 0, 'intval');        if (empty($class_id)) {            $this->error('请选择班级');        }        $ClassMoneyLog = M('ClassMoneyLog');        $map['class_id'] = $class_id;        $list = $ClassMoneyLog->where($map)->order('addtime desc')->group('themounth')->field('sum(if(type=1,money,0)) moneys,FROM_UNIXTIME(addtime,\'%Y-%m\') as themounth')->select();        foreach ($list as &$one) {            if ($one['themounth'] == date('Y-m')) {                $etime = strtotime($one['themounth'] . date('-d'));            } else {                $etime = strtotime($one['themounth'] . date('-t', strtotime($one['themounth'] . '-01')));            }            $one['detail'] = $ClassMoneyLog->where($map)->where(array('addtime' => array('between', array(strtotime($one['themounth'] . '-01'), $etime + 3600 * 24 - 1))))->order('id desc')->select();            if (empty($one['detail'])) {                $one['detail'][0]['now_money'] = $ClassMoneyLog->where($map)->where(array('addtime' => array('lt', strtotime($one['themounth'] . '-01') + 3600 * 24 - 1)))->order('id desc')->getField('now_money');            }        }        $this->success($list);    }    /**     * 班级账户报表     */    public function classMoneyTable() {        $class_id = I('class_id', 0, 'intval');        if (empty($class_id)) {            $this->error('请选择班级');        }        $st = I('st', 0, 'strtotime');        $et = I('et', 0, 'strtotime');        empty($st) && $st = strtotime(date('Y-01-01'));        empty($et) && $et = strtotime(date('Y-12-31'));        $et+=3600 * 24 - 1;        if ($et < $st) {            $this->error('结束时间小于起始时间');        }        $ClassMoneyLog = M('ClassMoneyLog');        $map['class_id'] = $class_id;        $map['addtime'] = array('between', array($st, $et));        $count = $ClassMoneyLog->where($map)->count();        $Page = new \Think\Page($count);        $list = $ClassMoneyLog->where($map)->limit($Page->firstRow, $Page->listRows)->select();        $Student = M('Student');        $StudentMoneyLog = M('StudentMoneyLog');        $OutpayApply = M('OutpayApply');        foreach ($list as &$one) {            if (!empty($one['app_id'])) {                $oinfo = $OutpayApply->find($one['app_id']);                if(!empty($oinfo['pics']))                {                    $one['app_pics'] = explode(',', $oinfo['pics']);                }                else                {                    $one['app_pics']='';                }                $one['bz'] = $oinfo['student_ids'];            }            if (!empty($one['bz'])) {                $one['students'] = $Student->where(array('id' => array('in', $one['bz'])))->field('id,name')->select();                foreach ($one['students'] as &$student) {                    $student_money_log = $StudentMoneyLog->where(array('student_id' => $student['id'], 'class_money_id' => $one['id']))->find();                    if($student_money_log['money']<0 && $student_money_log['type']==1)                    {                        $student['type'] = "0";                        $student['money'] = (0-$student_money_log['money'])."";                    }                    else                    {                        $student['type'] = $student_money_log['type'];                        $student['money'] = $student_money_log['money'];                    }                                        $student['addtime'] = $student_money_log['addtime'];                }            }            if($one['money']<0 && $one['type']==1)            {                $one['type']='0';                $one['money']=(0-$one['money'])."";            }                    }        $map['addtime'] = array('lt', $st);        $qc = $ClassMoneyLog->where($map)->order('id desc')->getField('now_money');        $map['addtime'] = array('lt', $et);        $qm = $ClassMoneyLog->where($map)->order('id desc')->getField('now_money');        $this->success(array('data' => $list, 'p' => I('p', 1, 'intval'), 'qc' => $qc, 'qm' => $qm));    }    /**     * 删除学生     * 学生在班级的余额为空时班主任可以删除学生     */    public function delStudent() {        $minfo = $this->minfo();        if (empty($minfo['tinfo'])) {            $this->error('您不是老师不能删除');        }        if (empty($minfo['tinfo']['master_class_id'])) {            $this->error('您不是班主任不能删除');        }        $student_id = I('id', 0, 'intval');        if (empty($student_id)) {            $this->error('请选择要删除的学生');        }        $Student = D('Student');        if (false === $sinfo = $Student->find($student_id)) {            $this->error($Student->getError());        }        if ($minfo['tinfo']['master_class_id'] != $sinfo['class_id']) {            $this->error('您不是该学生的班主任，不能删除');        }        if ($sinfo['money'] != 0) {            $this->error('该学生还有未使用班费，请先结清班费');        }        //把班级id设置0        $Student->where(array('id' => $student_id))->setField('class_id', 0);        $this->success();    }    /**     * 添加收取班费     */    public function incomeClassMoney() {        $minfo = $this->minfo();        $class_id = I('class_id', 0, 'intval');        if (empty($class_id)) {            $this->error('请选择班级');        }        $is_auth = false;        foreach ($minfo['ptainfo'] as $pinfo) {            if ($pinfo['class_id'] == $class_id && $pinfo['job'] == 1) {                $is_auth = true;                break;            }        }        if (!$is_auth) {            $this->error('您没有该班收取班费的权限');        }        $data = I('data'); // 学生id _ 金额 ,学生id _ 金额 ,学生id _ 金额 ,学生id _ 金额 ,学生id _ 金额         if (empty($data)) {            $this->error('请勾选学生');        }        $stu_money_arr = explode(',', $data);        $StudentMoneyLog = D('StudentMoneyLog');        $StudentMoneyLog->startTrans();        $classdata = array(); //金额=>id        foreach ($stu_money_arr as $stu_money) {            list($student_id, $money) = explode('_', $stu_money);            $classdata[$money][] = $student_id;        }        $ClassMoneyLog = D('ClassMoneyLog');        $classadddata['class_id'] = $class_id;        foreach ($classdata as $money => $every) {            $count = count($every);            $classadddata['money'] = $money * $count;            $classadddata['note'] = '收取' . $count . '人班费,每人' . $money . '元。';            $classadddata['bz'] = implode(',', $every);            if (false === $ClassMoneyLog->create($classadddata) || false === $class_money_id = $ClassMoneyLog->add()) {                $StudentMoneyLog->rollback();                $this->error($ClassMoneyLog->getError());            }        }        foreach ($stu_money_arr as $stu_money) {            list($student_id, $money) = explode('_', $stu_money);            $classdata[$money][] = $student_id;            $adddata['student_id'] = $student_id;            $adddata['money'] = $money;            $adddata['class_money_id'] = $class_money_id;            $adddata['note'] = '收取班费';            if (false === $StudentMoneyLog->create($adddata) || false === $StudentMoneyLog->add()) {                $StudentMoneyLog->rollback();                $this->error($StudentMoneyLog->getError());            }        }        $temp_send_arr=array();        foreach ($stu_money_arr as $stu_money) {            list($student_id, $money) = explode('_', $stu_money);            $sinfo = M()->table('__STUDENT__')->find($student_id);            $sname = $sinfo['name'];            $smoney = $sinfo['money'];            $cinfo = M()->table('__CLASS__')->find($class_id);            $cname = $cinfo['grade'] . $cinfo['name'];            $args['first'] = '您好，' . $sname . '所在班级' . $cname . '班费余额发生变化';            $args['keyword1'] = date('Y年m月d日 H:i', NOW_TIME);            $args['keyword2'] = '缴纳班费';            $args['keyword3'] = '+' . $money . '元';            $args['remark'] = '当前总余额' . $smoney . '元,点击查看详情';            $openids = M()->table('__MEMBER__')->where(array('phone' => array('in', array($sinfo['phone'], $sinfo['phone2']))))->getField('openid', true);             foreach ($openids as $openid) {                $temp_send_arr[]=array('OPENTM207664902',$args,$openid,'');                            }        }        $StudentMoneyLog->commit();        if(!empty($temp_send_arr))        {            //群发通过长连接服务发送            $host=substr(C('WEB_DOMAIN'),7,-1);            $WS =  new \Lib\WebsocketClient($host,C('WEB_SOCKET_PORT'));            $send_data=array('send_temp_message'=>$temp_send_arr);            $WS->sendData($send_data);        }        $this->success();    }    public function editStudentInfo() {        $minfo = $this->minfo();        $student_id = I('id', 0, 'intval');        if (empty($student_id)) {            $this->error('请传入学生id');        }        if (!in_array($student_id, $minfo['sun_ids'])) {            $this->error('不是您的孩子，不能编辑');        }        $Student = D('Student');        if (false === $sinfo = $Student->find($student_id)) {            $this->error($Student->getError());        }        if (empty($sinfo)) {            $this->error('未查找到孩子信息');        }        $Class = D('Class');        $post = I('post.');        //去掉关键非法信息        unset($post['phone']);        unset($post['phone2']);        unset($post['money']);        unset($post['class_no']);        //只能设置自己的家庭关系        if ($minfo['phone'] == $sinfo['phone2']) {            $post['family_ties2'] = $post['family_ties'];            unset($post['family_ties']);        }        //如果切换了班级 切班级余额不未空 不能修改班级        if (isset($post['class_id']) && $post['class_id'] != $sinfo['class_id']) {            if ($sinfo['money'] != 0) {                $this->error('班级余额不为空，不能修改班级');            }            if (!$Class->find($post['class_id'])) {                $this->error($Class->getError() ? $Class->getError() : '所选班级不存在');            }        }        $Student->startTrans();        if (false === $Student->create($post) || false === $Student->save()) {            $Student->rollback();            $this->error($Class->getError());        }        $Student->commit();        $this->success($this->minfo());    }    public function editMyPhone() {        $phone = I('phone');        $verify = I('verify');        if (empty($phone)) {            $this->error('缺少参数 phone');        }        if (!checkPhoneFormat($phone)) {            $this->error('手机号码格式错误');        }        if (empty($verify)) {            $this->error('缺少参数 verify');        }        if ($verify != S('phone_verify' . $phone)) {            $this->error('验证码错误');        }        S('phone_verify' . $phone, null);        $minfo = $this->minfo();        if ($phone == $minfo['phone']) {            //手机一样 不修改直接返回            $this->success();        }        $Member = D('Member');        $having = $Member->where(array('phone' => $phone, 'id' => array('neq' => $minfo['id'])))->find();        if ($having) {            $this->error('手机号已存在');        }        if (!checkPhoneFormat($phone)) {            $this->error('手机格式不正确');        }        //查询出自己的小孩        $Student = D('Student');        $smap['phone|phone2'] = $minfo['phone'];        if (false === $sinfos = $Student->where($smap)->select()) {            $this->error($Student->getError());        }        $Student->startTrans();        foreach ($sinfos as $sinfo) {            if ($sinfo['phone'] == $minfo['phone']) {                if (false === $Student->where($sinfo)->setField('phone', $phone)) {                    $Student->rollback();                    $this->error($Student->getError());                }            } else {                if (false === $Student->where($sinfo)->setField('phone2', $phone)) {                    $Student->rollback();                    $this->error($Student->getError());                }            }        }        if (false === $Member->where(array('id' => $minfo['id']))->setField('phone', $phone)) {            $Student->rollback();            $this->error($Member->getError());        }        $Student->commit();        $this->success();    }    public function editMyPwd() {        $minfo = $this->minfo();        $phone = $minfo['phone'];        $pwd = I('pwd');        $verify = I('verify');        if (empty($verify)) {            $this->error('请输入验证码');        }        if (empty($pwd)) {            $this->error('请输入密码');        }        if ($verify != S('phone_verify' . $phone)) {            $this->error('验证码错误');        }        S('phone_verify' . $phone, null);        if (false === $encryptpwd = getencrypt($pwd, $phone)) {            $this->error('加密错误，请联系管理员');        }        $Member = M('Member');        if (false === $Member->where(array('id' => $minfo['id']))->setField('pwd', $encryptpwd)) {            $this->error($Member->getError());        }        $this->success();    }    public function editMyHeaderurl() {        $minfo = $this->minfo();        $headerurl = I('headerurl');        if (empty($headerurl)) {            $this->error('请上传图片');        }        $Member = M('Member');        $Member->where(array('id' => $minfo['id']))->setField('headerurl', $headerurl);        $this->success($headerurl);    }    public function editMyRealName() {        $minfo = $this->minfo();        $real_name = I('real_name');        if (empty($real_name)) {            $this->error('请输入姓名');        }        $Member = M('Member');        $Member->where(array('id' => $minfo['id']))->setField('real_name', $real_name);        $this->success($real_name);    }    public function addFeedback() {        $cache_key = md5(implode($_POST));        if (S($cache_key) === true) {            $this->error('请不要重复发送相同的信息');        }        $minfo = $this->minfo();        $post = I('post.');        unset($post['id']);        $post['member_id'] = $minfo['id'];        $Feedback = D('Feedback');        $Feedback->startTrans();        if (false === $Feedback->create($post) || false === $Feedback->add()) {            $Feedback->rollback();            $this->error($Feedback->getError());        }        $Feedback->commit();        S($cache_key, true, 30);        $this->success();    }    public function addFamilyTie() {        $minfo = $this->minfo();        $student_id = I('student_id', 0, 'intval');        $phone = I('phone');        $family_tie = I('family_tie');        if (empty($student_id)) {            $this->error('请选择孩子');        }        if (empty($phone)) {            $this->error('请输入手机号');        }        if (empty($family_tie)) {            $this->error('缺少参数family_tie');        }        if (!checkPhoneFormat($phone)) {            $this->error('手机号格式不正确');        }        $Student = M('Student');        $sinfo = $Student->find($student_id);        if (empty($sinfo)) {            $this->error('不存在这个孩子');        }        if (!empty($sinfo['phone']) && !empty($sinfo['phone2'])) {            $this->error('该学生已经有两个监护人(最多两个)');        }        if ($sinfo['phone'] != $minfo['phone'] && $sinfo['phone2'] != $minfo['phone']) {            $this->error('不是您的孩子');        }        if ($phone == $minfo['phone']) {            $this->error('这是您自己的手机号');        }        if (empty($sinfo['phone'])) {            $sdata['phone'] = $phone;            $sdata['family_ties'] = $family_tie;        } else {            $sdata['phone2'] = $phone;            $sdata['family_ties2'] = $family_tie;        }        $mdata['phone'] = $phone;        $mdata['real_name'] = I('name');        $mdata['headerurl'] = I('headerurl');        $Member = M('Member');        $Member->startTrans();        if (!$Member->where(array('phone' => $phone))->find()) {            if (false === $Member->add($mdata)) {                $Member->rollback();                $this->error($Member->getError());            }        }        if (false === $Student->where(array('id' => $student_id))->save($sdata)) {            $Member->rollback();            $this->error($Member->getError());        }        $Member->commit();        $this->success();    }    /**     * 新增通知评论     * @param int $id 消息id     * @param string $content 评论     */    public function addMessageComment() {        $minfo = $this->minfo();        $post['message_id'] = I('id', 0, 'intval');        $post['reply_id'] = I('reply_id', 0, 'intval');        $post['content'] = I('content');        if (empty($post['message_id'])) {            $this->error('缺少参数id');        }        if (empty($post['content'])) {            $this->error('评论内容不能为空');        }        $post['member_id'] = $minfo['id'];        $MessageComment = D('MessageComment');        $MessageComment->startTrans();        if (false === $MessageComment->create($post) || false === $MessageComment->add()) {            $MessageComment->rollback();            $this->error($MessageComment->getError());        }        $MessageComment->commit();        //通知发送者        $sendminfo = M()->table('__MESSAGE__ m ')->join('__MEMBER__ mb on mb.id=m.member_id', 'left')->where(array('m.id' => $post['message_id']))->field('mb.*')->find();        $changegroup[] = array(array($sendminfo['token']), array('mySendMessageList', 'openMessage','readMessage'));        //通知其他收消息者                $otherminfos = M()->table('__MESSAGE_READ__ mr ')->join('__MEMBER__ mb on mb.id=mr.member_id', 'left')->where(array('mr.message_id' => $post['message_id'], 'mb.token' => array('neq', '')))->field('mb.*')->select();        $othertokens = array();        foreach ($otherminfos as $otherminfo) {            $othertokens[] = $otherminfo['token'];        }        $changegroup[] = array($othertokens, array('myMessageList','openMessage','readMessage'));        $this->success('', $changegroup);    }    /**     * 新增作业评论     * @param int $id 消息id     * @param string $content 评论     */    public function addHomeworkComment() {        $minfo = $this->minfo();        $post['homework_id'] = I('id', 0, 'intval');        $post['reply_id'] = I('reply_id', 0, 'intval');        $post['content'] = I('content');        if (empty($post['homework_id'])) {            $this->error('缺少参数id');        }        if (empty($post['content'])) {            $this->error('评论内容不能为空');        }        $post['member_id'] = $minfo['id'];        $HomeworkComment = D('HomeworkComment');        $HomeworkComment->startTrans();        if (false === $HomeworkComment->create($post) || false === $HomeworkComment->add()) {            $HomeworkComment->rollback();            $this->error($HomeworkComment->getError());        }        $HomeworkComment->commit();        //通知发送者        $sendminfo = M()->table('__HOMEWORK__ h ')->join('__MEMBER__ mb on mb.id=h.member_id', 'left')->where(array('h.id' => $post['homework_id']))->field('mb.*')->find();        $changegroup[] = array(array($sendminfo['token']), array('mySendHomeworkList', 'openHomework','readHomework'));        //通知其他收消息者                $otherminfos = M()->table('__HOMEWORK_READ__ hr ')->join('__MEMBER__ mb on mb.id=hr.member_id', 'left')->where(array('hr.homework_id' => $post['homework_id'], 'mb.token' => array('neq', '')))->field('mb.*')->select();        $othertokens = array();        foreach ($otherminfos as $otherminfo) {            $othertokens[] = $otherminfo['token'];        }        $changegroup[] = array($othertokens, array('myHomeworkList','openHomework','readHomework'));        $this->success('', $changegroup);    }    public function delMessageComment()    {        $minfo = $this->minfo();        $id =   I('id',0,'intval');        if(empty($id))        {            $this->error('缺少参数id');        }        $MessageComment =   D('MessageComment');        $info=$MessageComment->find($id);        if(empty($info))        {            $this->error('不存在评论');        }        if($info['is_delete']==1)        {            $this->error('评论已经删除');        }        //查出对应消息的member        $message_member_id=M('Message')->getFieldById($info['message_id'],'member_id');        if($info['member_id']!=$minfo['id'] && $message_member_id!=$minfo['id'])        {            $this->error('不是您的评论或不是您发布的消息，不能删除');        }        $MessageComment->where(array('id'=>$id))->setField('is_delete',1);                //通知发送者        $sendminfo = M()->table('__MESSAGE__ m ')->join('__MEMBER__ mb on mb.id=m.member_id', 'left')->where(array('m.id' => $info['message_id']))->field('mb.*')->find();        $changegroup[] = array(array($sendminfo['token']), array('mySendMessageList', 'openMessage','readMessage'));        //通知其他收消息者                $otherminfos = M()->table('__MESSAGE_READ__ mr ')->join('__MEMBER__ mb on mb.id=mr.member_id', 'left')->where(array('mr.message_id' => $info['message_id'], 'mb.token' => array('neq', '')))->field('mb.*')->select();        $othertokens = array();        foreach ($otherminfos as $otherminfo) {            $othertokens[] = $otherminfo['token'];        }        $changegroup[] = array($othertokens, array('myMessageList','openMessage','readMessage'));        $this->success('', $changegroup);    }    public function delHomeworkComment()    {        $minfo = $this->minfo();        $id =   I('id',0,'intval');        if(empty($id))        {            $this->error('缺少参数id');        }        $HomeworkComment =   D('HomeworkComment');        $info=$HomeworkComment->find($id);        if(empty($info))        {            $this->error('不存在评论');        }        if($info['is_delete']==1)        {            $this->error('评论已经删除');        }        //查出对应消息的member        $homework_member_id=M('Homework')->getFieldById($info['homework_id'],'member_id');        if($info['member_id']!=$minfo['id'] && $homework_member_id!=$minfo['id'])        {            $this->error('不是您的评论或不是您发布的消息，不能删除');        }        $HomeworkComment->where(array('id'=>$id))->setField('is_delete',1);        //通知发送者        $sendminfo = M()->table('__HOMEWORK__ h ')->join('__MEMBER__ mb on mb.id=h.member_id', 'left')->where(array('h.id' => $info['homework_id']))->field('mb.*')->find();        $changegroup[] = array(array($sendminfo['token']), array('mySendHomeworkList', 'openHomework','readHomework'));        //通知其他收消息者                $otherminfos = M()->table('__HOMEWORK_READ__ hr ')->join('__MEMBER__ mb on mb.id=hr.member_id', 'left')->where(array('hr.homework_id' => $info['homework_id'], 'mb.token' => array('neq', '')))->field('mb.*')->select();        $othertokens = array();        foreach ($otherminfos as $otherminfo) {            $othertokens[] = $otherminfo['token'];        }        $changegroup[] = array($othertokens, array('myHomeworkList','openHomework','readHomework'));        $this->success('', $changegroup);    }    public function test() {        $this->_sendSocket('asd', array('d9e4a711bde431e07b91cded773f0c38'));    }    /**     * 上传文件 字段img     */    public function upload() {        if ($_FILES) {            $upload = new \Think\Upload();            $upload->exts = array('jpg', 'gif', 'png', 'jpeg', 'image/jpg'); // 设置附件上传类型            $upload->rootPath = './Uploads/'; // 设置附件上传根目录            $upload->savePath = 'images/'; // 设置附件上传（子）目录            $info = $upload->uploadOne($_FILES['img']);            if (!$info) {                $this->error($upload->getError());            } else {                $src = $upload->rootPath . $info['savepath'] . $info['savename'];                $thumb = $upload->rootPath . $info['savepath'] . 'thumb_' . $info['savename'];            }        } else {            $imgdata = I('base64', '', 'base64_decode');            if (empty($imgdata)) {                $this->error('请上传图片');            }            $filename = NOW_TIME . rand(1000, 9999);            $path = './Uploads/images/' . date('Y-m-d-') . '/';            if (!is_dir($path)) {                if (!mkdir($path)) {                    $this->error('创建文件夹失败');                }            }            $src = $path . $filename . '.jpg';            $thumb = $path . 'thumb_' . $filename . '.jpg';            if (false === file_put_contents($src, $imgdata)) {                $this->error('写入文件失败');            }        }        $image = new \Think\Image();        $image->open($src);        //裁剪成正方形        $image->thumb($image->width(), $image->width())->save($thumb);        $original_src = C('WEB_DOMAIN') . substr($src, 2);        $thumb_src = C('WEB_DOMAIN') . substr($thumb, 2);        $this->success(array('original_src' => $original_src, 'thumb_src' => $thumb_src));    }    public function getImgInfo() {        $src = I('src');        if (empty($src)) {            $this->error('请输入图片链接');        }        if (false === strpos($src, ',')) {            $srcs = array($src);        } else {            $srcs = explode(',', $src);        }        $returns = array();        foreach ($srcs as $src) {            if (false === strpos($src, C('WEB_DOMAIN'))) {                $this->error('不是本服务器图片');            }            $path = str_replace(C('WEB_DOMAIN'), './', $src);            $image = new \Think\Image();            if (!is_file($path)) {                $this->error('不存在图片');            }            $image->open($path);            $return['width'] = $image->width();            $return['height'] = $image->height();            $returns[] = $return;        }        if(count($returns)==1)        {            $returns=$returns[0];        }        $this->success($returns);    }    public function cut() {        $data = I('data', '', '');        $json = json_decode($data, true);        if (!$json) {            $this->error('json错误');        }        $src = $json['src'];        $image = new \Think\Image();        $image->open('.' . $src);        $new_name = substr($src, 0, strpos($src, '.'));        $new_mite = substr($src, strpos($src, '.'));        $src_cut = $new_name . '_cut' . $new_mite;        $image->crop($json['w'], $json['h'], $json['x'], $json['y'])->save('.' . $src_cut);        $this->success(C('WEB_DOMAIN') . substr($src_cut, 1));        unlink('.' . $src);    }        public function downloadWxMedia()    {                $media_id = I('media_id');        $weobj = new \Lib\Wechat(C('WEIXIN_CONIFG'));        if (false === $imgdata = $weobj->getMedia($media_id)) {            $this->error($weobj->getError());        }        $filename = NOW_TIME . rand(1000, 9999);        $path = './Uploads/images/' . date('Y-m-d') . '/';        if (!is_dir($path)) {            if (!mkdir($path)) {                $this->error('创建文件夹失败');            }        }        $src = $path . $filename . '.jpg';                if (false === file_put_contents($src, $imgdata)) {            $this->error('写入文件失败');        }        $this->success(C('WEB_DOMAIN') . substr($src, 2));    }    public function getWxJsConfig() {        $url = I('url');        if (empty($url)) {            $this->error('请输入当前url');        }        $weobj = new \Lib\Wechat(C('WEIXIN_CONIFG'));        $wxinfo2 = $weobj->getJsSign($url);        foreach ($wxinfo2 as $k => $v) {            $wxinfo[strtolower($k)] = $v;        }        $this->success($wxinfo);    }    private function minfo($token = '', $member_id = 0) {        if ('' === $token) {            $token = I('token');        }        $Member = D('Member');        if (0 === $member_id) {            if (empty($token)) {                $this->error('缺少参数token');            }        } elseif ('0' === $member_id) {            return array();        } else {            $map['id'] = $member_id;        }        if (empty($map)) {            $map['token'] = $token;        }        if (false === $minfo = $Member->where($map)->find()) {            $this->error($Member->getError());        }        if (empty($minfo) && !empty($token)) {            $this->error('登录过期');        }        return $minfo;    }    private function cinfo($class_id) {        if (empty($class_id)) {            $this->error('缺少参数class_id');        }        if (false === strpos($class_id, ',')) {            $class_id = array($class_id);        } else {            $class_id = explode(',', $class_id);        }        $Class = D('Class');        $cinfos = $Class->where(array('id' => array('in', $class_id)))->select();        return $cinfos;    }    /**     * 参数按键值排序连接md5     * 验证签名     */    private function checkSign() {        $data = $_POST;        if (!isset($data['sign'])) {            //缺少签名            $this->error('缺少参数sign');        }        $localsign = $this->getSign();        if ($localsign != $data['sign']) {            $getmd5 = $data['sign'];            unset($data['sign']);            ksort($data);            foreach ($data as $k => $v) {//                $v = urlencode($v);                $buff .= $k . "=" . $v . "&";            }            $this->error('签名错误:' . $buff . API_TOKEN . 'md5:' . $localsign . 'getmd5' . $getmd5);        }    }    private function getSign() {        $data = $_POST;        unset($data['sign']);        ksort($data);        foreach ($data as $k => $v) {//            $v = urlencode($v);            $buff .= $k . "=" . $v . "&";        }        return md5($buff . API_TOKEN);    }    //当前U函数 兼容绑定入口生成路径不带模块    private function this_u($parm, $url = '') {        if (IS_BIND_ENTR === true) {            return C('WEB_DOMAIN') . 'Home' . U($url, $parm);        } else {            return U($url, $parm, true, true);        }    }    private function _sendSocket($changegroup, $port = '') {                    if(!empty($changegroup))        {            if (empty($port)) {                $port = C('WEB_SOCKET_PORT');            }            $host = substr(C('WEB_DOMAIN'), 7, -1);                $Websocket = new \Lib\WebsocketClient($host, $port);            foreach ($changegroup as $change) {                $send_data['tokens'] = $change[0];                $send_data['interfaces'] = $change[1];                if (!empty($send_data['tokens'])) {                    if (false === $Websocket->sendData($send_data)) {                        //            \Think\Log::write('链接Socket出错','NOTIC','',C('LOG_PATH').'/Socket/'.date('y_m_d').'.log');                    }                }            }            unset($Websocket);        }    }    public function success($msg = '', $changegroup = array()) {        $this->_sendSocket($changegroup);        $data['msg'] = $msg;        $data['status'] = 1;        $this->ajaxReturn($data);        exit;    }    public function error($msg = '') {        $data['msg'] = $msg;        $data['status'] = 0;        $this->ajaxReturn($data);        exit;    }}